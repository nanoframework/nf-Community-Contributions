<?xml version="1.0"?>
<doc>
    <assembly>
        <name>mscorlib</name>
    </assembly>
    <members>
        <member name="T:System.Action">
            <summary>
            Encapsulates a method that has no parameters and does not return a value.
            </summary>
        </member>
        <member name="T:System.Action`1">
            <summary>
            Encapsulates a method that has a single parameter and does not return a value.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.
            This type parameter is covariant.That is, you can use either the type you specified or any type that is more derived.For more information about covariance and contravariance, see <see href="https://docs.microsoft.com/en-us/dotnet/standard/generics/covariance-and-contravariance">Covariance and Contravariance in Generics</see>.</typeparam>
            <param name="obj">The parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:System.Action`2">
            <summary>
            Encapsulates a method that has a single parameter and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.
            This type parameter is covariant.That is, you can use either the type you specified or any type that is more derived.For more information about covariance and contravariance, see <see href="https://docs.microsoft.com/en-us/dotnet/standard/generics/covariance-and-contravariance">Covariance and Contravariance in Generics</see>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.
            This type parameter is covariant.That is, you can use either the type you specified or any type that is more derived.For more information about covariance and contravariance, see <see href="https://docs.microsoft.com/en-us/dotnet/standard/generics/covariance-and-contravariance">Covariance and Contravariance in Generics</see>.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:System.Func`1">
            <summary>
            Encapsulates a method that has no parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.
            This type parameter is covariant.That is, you can use either the type you specified or any type that is more derived.For more information about covariance and contravariance, see <see href="https://docs.microsoft.com/en-us/dotnet/standard/generics/covariance-and-contravariance">Covariance and Contravariance in Generics</see>.</typeparam>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:System.Func`2">
            <summary>
            Encapsulates a method that has one parameter and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.
            This type parameter is covariant.That is, you can use either the type you specified or any type that is more derived.For more information about covariance and contravariance, see <see href="https://docs.microsoft.com/en-us/dotnet/standard/generics/covariance-and-contravariance">Covariance and Contravariance in Generics</see>.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.
            This type parameter is covariant.That is, you can use either the type you specified or any type that is more derived.For more information about covariance and contravariance, see <see href="https://docs.microsoft.com/en-us/dotnet/standard/generics/covariance-and-contravariance">Covariance and Contravariance in Generics</see>.</typeparam>
            <param name="arg">The parameter of the method that this delegate encapsulates.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:System.Func`3">
            <summary>
            Encapsulates a method that has one parameter and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.
            This type parameter is covariant.That is, you can use either the type you specified or any type that is more derived.For more information about covariance and contravariance, see <see href="https://docs.microsoft.com/en-us/dotnet/standard/generics/covariance-and-contravariance">Covariance and Contravariance in Generics</see>.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:System.AppDomainUnloadedException">
            <summary>
            The exception that is thrown when an attempt is made to access an unloaded application domain.
            </summary>
        </member>
        <member name="M:System.AppDomainUnloadedException.#ctor">
            <summary>
            Initializes a new instance of the AppDomainUnloadedException class.
            </summary>
        </member>
        <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AppDomainUnloadedException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AppDomainUnloadedException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:System.ApplicationException">
            <summary>
            Serves as the base class for application-defined exceptions.
            </summary>
        </member>
        <member name="M:System.ApplicationException.#ctor">
            <summary>
            Initializes a new instance of the ApplicationException class.
            </summary>
        </member>
        <member name="M:System.ApplicationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ApplicationException class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:System.ApplicationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ApplicationException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:System.ArgumentException">
            <summary>
            The exception that is thrown when one of the arguments provided to a method is not valid.
            </summary>
        </member>
        <member name="M:System.ArgumentException.#ctor">
            <summary>
            Initializes a new instance of the ArgumentException class.
            </summary>
        </member>
        <member name="M:System.ArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ArgumentException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
        </member>
        <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ArgumentException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ArgumentException class with a specified error message, the parameter name, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of the parameter that caused the current exception. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
        </member>
        <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ArgumentException class with a specified error message and the name of the parameter that causes this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="paramName">The name of the parameter that caused the current exception. </param>
        </member>
        <member name="P:System.ArgumentException.Message">
            <summary>
            Gets the error message and the parameter name, or only the error message if no parameter name is set.
            </summary>
            <value>
            A text string describing the details of the exception.
            </value>
        </member>
        <member name="P:System.ArgumentException.ParamName">
            <summary>
            Gets the name of the parameter that causes this exception.
            </summary>
            <value>
            The parameter name.
            </value>
        </member>
        <member name="T:System.ArgumentNullException">
            <summary>
            The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
            </summary>
        </member>
        <member name="M:System.ArgumentNullException.#ctor">
            <summary>
            Initializes a new instance of the ArgumentNullException class.
            </summary>
        </member>
        <member name="M:System.ArgumentNullException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ArgumentNullException class with the name of the parameter that causes this exception.
            </summary>
            <param name="argument">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of the ArgumentNullException class with a specified error message and the name of the parameter that causes this exception.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception. </param>
            <param name="message">A message that describes the error. </param>
        </member>
        <member name="T:System.ArgumentOutOfRangeException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
            </summary>
        </member>
        <member name="M:System.ArgumentOutOfRangeException.#ctor">
            <summary>
            Initializes a new instance of the ArgumentOutOfRangeException class.
            </summary>
        </member>
        <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ArgumentOutOfRangeException class with the name of the parameter that causes this exception.
            </summary>
            <param name="paramName">The name of the parameter that causes this exception.</param>
        </member>
        <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ArgumentOutOfRangeException class with the name of the parameter that causes this exception and a specified error message.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception. </param>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="T:System.Array">
            <summary>
            Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.
            </summary>
        </member>
        <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
            <summary>
            Creates a one-dimensional Array of the specified Type and length, with zero-based indexing.
            </summary>
            <param name="elementType">The Type of the Array to create.</param>
            <param name="length">The size of the Array to create.</param>
            <returns>A new one-dimensional Array of the specified Type with the specified length, using zero-based indexing.</returns>
            <remarks><para>Unlike most classes, Array provides the CreateInstance method, instead of public constructors, to allow for late bound access.</para>
            <para>Reference-type elements are initialized to nullNothingnullptrunit a null reference(Nothing in Visual Basic). Value-type elements are initialized to zero.</para>
            <para>This method is an O(n) operation, where n is length.</para>
            Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
            <summary>
            Copies a range of elements from an Array starting at the first element and pastes them into another Array starting at the first element. The length is specified as a 32-bit integer.
            </summary>
            <param name="sourceArray">The Array that contains the data to copy.</param>
            <param name="destinationArray">The Array that receives the data.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
        </member>
        <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from an Array starting at the specified source index and pastes them to another Array starting at the specified destination index. The length and the indexes are specified as 32-bit integers.
            </summary>
            <param name="sourceArray">The Array that contains the data to copy.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index in the sourceArray at which copying begins.</param>
            <param name="destinationArray">The Array that receives the data.</param>
            <param name="destinationIndex">A 32-bit integer that represents the index in the destinationArray at which storing begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
        </member>
        <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
            <summary>
            Sets a range of elements in the Array to zero, to false, or to  null reference (Nothing in Visual Basic), depending on the element type.
            </summary>
            <param name="array">The Array whose elements need to be cleared.</param>
            <param name="index">The starting index of the range of elements to clear.</param>
            <param name="length">The number of elements to clear.</param>
        </member>
        <member name="M:System.Array.GetValue(System.Int32)">
            <summary>
            Gets the value at the specified position in the one-dimensional Array. The index is specified as a 32-bit integer.
            </summary>
            <param name="index">A 32-bit integer that represents the position of the Array element to get.</param>
            <returns>The value at the specified position in the one-dimensional Array.</returns>
        </member>
        <member name="P:System.Array.Length">
            <summary>
            Gets a 32-bit integer that represents the total number of elements in all the dimensions of the Array.
            </summary>
            <value>
            A 32-bit integer that represents the total number of elements in all the dimensions of the Array; zero if there are no elements in the array.
            </value>
        </member>
        <member name="P:System.Array.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the Array.
            </summary>
            <value>
            An object that can be used to synchronize access to the Array.
            </value>
        </member>
        <member name="P:System.Array.IsReadOnly">
            <summary>
            Gets a value indicating whether the Array is read-only.
            </summary>
            <value>
            This property is always false for all arrays.
            </value>
        </member>
        <member name="P:System.Array.IsFixedSize">
            <summary>
            Gets a value indicating whether the Array has a fixed size.
            </summary>
            <value>
            This property is always true for all arrays.
            </value>
        </member>
        <member name="P:System.Array.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the Array is synchronized (thread safe).
            </summary>
            <value>
            This property is always false for all arrays.
            </value>
        </member>
        <member name="M:System.Array.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:System.Array"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:System.Array"/>.</returns>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
            <summary>
            Searches an entire one-dimensional sorted Array for a value using the specified IComparer interface.
            </summary>
            <param name="array">The sorted one-dimensional Array to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">The IComparer implementation to use when comparing elements.
            <para>-or-</para>
            <para>nullNothingnullptrunit a null reference(Nothing in Visual Basic) to use the IComparable implementation of each element.</para></param>
            <returns>The index of the specified value in the specified array, if value is found. If value is not found and value is less than one or more elements in array, a negative number which is the bitwise complement of the index of the first element that is larger than value. If value is not found and value is greater than any of the elements in array, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
        </member>
        <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
            <summary>
            Searches a range of elements in a one-dimensional sorted Array for a value, using the specified IComparer interface.
            </summary>
            <param name="array">The sorted one-dimensional Array to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">The IComparer implementation to use when comparing elements.
            <para>-or-</para>
            <para>nullNothingnullptrunit a null reference(Nothing in Visual Basic) to use the IComparable implementation of each element.</para></param>
            <returns>The index of the specified value in the specified array, if value is found. If value is not found and value is less than one or more elements in array, a negative number which is the bitwise complement of the index of the first element that is larger than value. If value is not found and value is greater than any of the elements in array, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
            <exception cref="T:System.InvalidOperationException">comparer is  null reference (Nothing in Visual Basic), value does not implement the IComparable interface, and the search encounters an element that does not implement the IComparable interface.</exception>
        </member>
        <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the current one-dimensional Array to the specified one-dimensional Array starting at the specified destination Array index. The index is specified as a 32-bit integer.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from the current Array.</param>
            <param name="index">A 32-bit integer that represents the index in array at which copying begins.</param>
        </member>
        <member name="M:System.Array.GetEnumerator">
            <summary>
            Returns an IEnumerator for the Array.
            </summary>
            <returns>An IEnumerator for the Array.</returns>
        </member>
        <member name="M:System.Array.IndexOf(System.Array,System.Object)">
            <summary>
            Searches for the specified object and returns the index of the first occurrence within the entire one-dimensional Array.
            </summary>
            <param name="array">The one-dimensional Array to search.</param>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array minus 1.</returns>
        </member>
        <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)">
            <summary>
            Searches for the specified object and returns the index of the first occurrence within the range of elements in the one-dimensional Array that extends from the specified index to the last element.
            </summary>
            <param name="array">The one-dimensional Array to search.</param>
            <param name="value">The object to locate in array.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>The index of the first occurrence of value within the range of elements in array that extends from startIndex to the last element, if found; otherwise, the lower bound of the array minus 1.</returns>
        </member>
        <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the index of the first occurrence within the range of elements in the one-dimensional Array that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="array">The one-dimensional Array to search.</param>
            <param name="value">The object to locate in array.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The index of the first occurrence of value within the range of elements in array that starts at startIndex and contains the number of elements specified in count, if found; otherwise, the lower bound of the array minus 1.</returns>
        </member>
        <member name="T:System.AsyncCallback">
            <summary>
            References a method to be called when a corresponding asynchronous operation completes.
            </summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="T:System.Attribute">
            <summary>
            Represents the base class for custom attributes.
            </summary>
        </member>
        <member name="M:System.Attribute.#ctor">
            <summary>
            Initializes a new instance of the Attribute class.
            </summary>
        </member>
        <member name="T:System.AttributeTargets">
            <summary>
            Specifies the application elements on which it is valid to apply an attribute.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Assembly">
            <summary>
            Attribute can be applied to an assembly.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Module">
            <summary>
            Attribute can be applied to a module.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Class">
            <summary>
            Attribute can be applied to a class.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Struct">
            <summary>
            Attribute can be applied to a structure; that is, a value type.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Enum">
            <summary>
            Attribute can be applied to an enumeration.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Constructor">
            <summary>
            Attribute can be applied to a constructor.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Method">
            <summary>
            Attribute can be applied to a method.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Property">
            <summary>
            Attribute can be applied to a property.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Field">
            <summary>
            Attribute can be applied to a field.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Event">
            <summary>
            Attribute can be applied to an event.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Interface">
            <summary>
            Attribute can be applied to an interface.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Parameter">
            <summary>
            Attribute can be applied to a parameter.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Delegate">
            <summary>
            Attribute can be applied to a delegate.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.ReturnValue">
            <summary>
            Attribute can be applied to a return value.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.All">
            <summary>
            Attribute can be applied to any application element.
            </summary>
        </member>
        <member name="T:System.AttributeUsageAttribute">
            <summary>
            Specifies the usage of another attribute class. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
            <summary>
            Initializes a new instance of the AttributeUsageAttribute class with the specified list of AttributeTargets, the AllowMultiple value, and the Inherited value.
            </summary>
            <param name="validOn">The set of values combined using a bitwise OR operation to indicate which program elements are valid.</param>
        </member>
        <member name="P:System.AttributeUsageAttribute.ValidOn">
            <summary>
            Gets a set of values identifying which program elements that the indicated attribute can be applied to.
            </summary>
            <value>One or several AttributeTargets values. The default is All.</value>
        </member>
        <member name="P:System.AttributeUsageAttribute.AllowMultiple">
            <summary>
            Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element.
            </summary>
            <value>true if more than one instance is allowed to be specified; otherwise, false. The default is false.</value>
        </member>
        <member name="P:System.AttributeUsageAttribute.Inherited">
            <summary>
            Gets or sets a Boolean value that determines whether the indicated attribute is inherited by derived classes and overriding members.
            </summary>
            <value>true if the attribute can be inherited by derived classes and overriding members; otherwise, false. The default is true.</value>
        </member>
        <member name="T:System.BitConverter">
            <summary>
            Converts base data types to an array of bytes, and an array of bytes to base data types.
            </summary>
        </member>
        <member name="P:System.BitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is stored in this computer architecture.
            </summary>
        </member>
        <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            Converts the specified double-precision floating point number to a 64-bit signed integer.
            </summary>
            <param name="value">The number to convert.</param>
            <returns></returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified Boolean value as an array of bytes.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.Char)">
            <summary>
            Returns the specified Unicode character value as an array of bytes.
            </summary>
            <param name="value">A character to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            Converts the specified 64-bit signed integer to a double-precision floating point number.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>A double-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a Boolean value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Returns a Unicode character converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A character formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double precision floating point number formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToString(System.Byte[])">
            <summary>
            Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A String of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in value; for example, "7F-2C-4A".</returns>
        </member>
        <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
            <summary>
            Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A String of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of value; for example, "7F-2C-4A".</returns>
        </member>
        <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <param name="length">The number of array elements in value to convert.</param>
            <returns>A String of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of value; for example, "7F-2C-4A".</returns>
        </member>
        <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">The array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">The array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="T:System.Boolean">
            <summary>
            Represents a Boolean value.
            </summary>
        </member>
        <member name="F:System.Boolean.FalseString">
            <summary>
            Represents the Boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:System.Boolean.TrueString">
            <summary>
            Represents the Boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:System.Boolean.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation (either "True" or "False").
            </summary>
            <returns>TrueString if the value of this instance is true, or FalseString if the value of this instance is false.</returns>
        </member>
        <member name="T:System.Byte">
            <summary>
            Represents an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:System.Byte.MaxValue">
            <summary>
            Represents the largest possible value of a Byte. This field is constant.
            </summary>
        </member>
        <member name="F:System.Byte.MinValue">
            <summary>
            Represents the smallest possible value of a Byte. This field is constant.
            </summary>
        </member>
        <member name="M:System.Byte.ToString">
            <summary>
            Converts the value of the current Byte object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this object, which consists of a sequence of digits that range from 0 to 9 with no leading zeroes.</returns>
            <remarks>The return value is formatted with the general numeric format specifier ("G") and the NumberFormatInfo object for the thread current culture.</remarks>
        </member>
        <member name="M:System.Byte.ToString(System.String)">
            <summary>
            Converts the value of the current Byte object to its equivalent string representation using the specified format.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>The string representation of the current Byte object, formatted as specified by the format parameter.</returns>
        </member>
        <member name="M:System.Byte.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its Byte equivalent.
            </summary>
            <param name="s">A string that contains a number to convert. The string is interpreted using the Integer style. </param>
            <returns>A byte value that is equivalent to the number contained in s.</returns>
            <exception cref="T:System.ArgumentNullException">s is  null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="T:System.Char">
            <summary>
            Represents a character as a UTF-16 code unit.
            </summary>
        </member>
        <member name="F:System.Char.MaxValue">
            <summary>
            Represents the largest possible value of a Char. This field is constant.
            </summary>
        </member>
        <member name="F:System.Char.MinValue">
            <summary>
            Represents the smallest possible value of a Char. This field is constant.
            </summary>
        </member>
        <member name="M:System.Char.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:System.Char.ToLower">
            <summary>
            Returns the lower case character.
            </summary>
            <returns>The lower case character.</returns>
        </member>
        <member name="M:System.Char.ToUpper">
            <summary>
            Returns the upper case character.
            </summary>
            <returns>The upper case character.</returns>
        </member>
        <member name="T:System.CLSCompliantAttribute">
            <summary>
            Indicates whether a program element is compliant with the Common Language Specification (CLS). This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes an instance of the CLSCompliantAttribute class with a Boolean value indicating whether the indicated program element is CLS-compliant.
            </summary>
            <param name="isCompliant">true if CLS-compliant; otherwise, false.</param>
        </member>
        <member name="P:System.CLSCompliantAttribute.IsCompliant">
            <summary>
            GGets the Boolean value indicating whether the indicated program element is CLS-compliant.
            </summary>
            <value>true if the program element is CLS-compliant; otherwise, false.</value>
        </member>
        <member name="T:System.Collections.ArrayList">
            <summary>
            Implements the IList interface using an array whose size is dynamically increased as required.
            </summary>
        </member>
        <member name="M:System.Collections.ArrayList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.ArrayList"/> class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="P:System.Collections.ArrayList.Capacity">
            <summary>
            Gets or sets the number of elements that the <see cref="T:System.Collections.ArrayList"/> can contain.
            </summary>
            <value>
            The number of elements that the <see cref="T:System.Collections.ArrayList"/> can contain.
            </value>
        </member>
        <member name="P:System.Collections.ArrayList.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:System.Collections.ArrayList"/>.
            </summary>
            <value>
            The number of elements actually contained in the <see cref="T:System.Collections.ArrayList"/>.
            </value>
        </member>
        <member name="P:System.Collections.ArrayList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.ArrayList"/> has a fixed size.
            </summary>
            <value>
            true if the <see cref="T:System.Collections.ArrayList"/> has a fixed size; otherwise, false. The default is false.
            </value>
        </member>
        <member name="P:System.Collections.ArrayList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.ArrayList"/> is read-only.
            </summary>
            <value>
            true if the <see cref="T:System.Collections.ArrayList"/> is read-only; otherwise, false. The default is false.
            </value>
        </member>
        <member name="P:System.Collections.ArrayList.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ArrayList"/> is synchronized (thread safe).
            </summary>
            <value>
            true if access to the <see cref="T:System.Collections.ArrayList"/> is synchronized (thread safe); otherwise, false. The default is false.
            </value>
        </member>
        <member name="P:System.Collections.ArrayList.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ArrayList"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ArrayList"/>.
            </value>
        </member>
        <member name="P:System.Collections.ArrayList.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.ArrayList.Add(System.Object)">
            <summary>
            Adds an object to the end of the <see cref="T:System.Collections.ArrayList"/>.
            </summary>
            <param name="value"></param>
            <returns>The <see cref="T:System.Object"/> to be added to the end of the <see cref="T:System.Collections.ArrayList"/>. The value can be <see langword="null"/>.</returns>
        </member>
        <member name="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
            <summary>
            Searches the entire sorted <see cref="T:System.Collections.ArrayList"/> for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="value">The Object to locate. The value can be  <see langword="null"/> reference (Nothing in Visual Basic). </param>
            <param name="comparer">The IComparer implementation to use when comparing elements.
            <para>-or-</para>
            <para>nullNothingnullptrunit a <see langword="null"/> reference(Nothing in Visual Basic) to use the IComparable implementation of each element.</para></param>
            <returns>The zero-based index of value in the sorted <see cref="T:System.Collections.ArrayList"/>, if value is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than value or, if there is no larger element, the bitwise complement of Count.</returns>
        </member>
        <member name="M:System.Collections.ArrayList.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ArrayList"/>.
            </summary>
        </member>
        <member name="M:System.Collections.ArrayList.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:System.Collections.ArrayList"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:System.Collections.ArrayList"/>.</returns>
        </member>
        <member name="M:System.Collections.ArrayList.Contains(System.Object)">
            <summary>
            Determines whether an element is in the <see cref="T:System.Collections.ArrayList"/>.
            </summary>
            <param name="value"></param>
            <returns>The<see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.ArrayList"/>.The value can be <see langword="null"/>.</returns>
        </member>
        <member name="M:System.Collections.ArrayList.CopyTo(System.Array)">
            <summary>
            Copies the entire <see cref="T:System.Collections.ArrayList"/> to a compatible one-dimensional Array, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList"/>. The Array must have zero-based indexing.</param>
        </member>
        <member name="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:System.Collections.ArrayList"/> to a compatible one-dimensional Array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList"/>. The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:System.Collections.ArrayList.GetEnumerator">
            <summary>
            Returns an enumerator for the entire <see cref="T:System.Collections.ArrayList"/>.
            </summary>
            <returns>An IEnumerator for the entire <see cref="T:System.Collections.ArrayList"/>.</returns>
        </member>
        <member name="M:System.Collections.ArrayList.IndexOf(System.Object)">
            <summary>
            Searches for the specified Object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ArrayList"/>.
            </summary>
            <param name="value">The Object to locate in the <see cref="T:System.Collections.ArrayList"/>. The value can be <see langword="null"/> reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the first occurrence of value within the entire <see cref="T:System.Collections.ArrayList"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
            <summary>
            Searches for the specified Object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.ArrayList"/> that extends from the specified index to the last element.
            </summary>
            <param name="value">The Object to locate in the <see cref="T:System.Collections.ArrayList"/>. The value can be <see langword="null"/> reference (Nothing in Visual Basic). </param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <returns>The zero-based index of the first occurrence of value within the range of elements in the <see cref="T:System.Collections.ArrayList"/> that extends from startIndex to the last element, if found; otherwise, -1.</returns>
        </member>
        <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
            <summary>
            Searches for the specified Object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.ArrayList"/> that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="value">The Object to locate in the <see cref="T:System.Collections.ArrayList"/>. The value can be <see langword="null"/> reference (Nothing in Visual Basic). </param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <param name="count">The number of elements in the section to search. </param>
            <returns>The zero-based index of the first occurrence of value within the range of elements in the <see cref="T:System.Collections.ArrayList"/> that starts at startIndex and contains count number of elements, if found; otherwise, -1.</returns>
        </member>
        <member name="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ArrayList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <para>value</para> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert. The `value` can be <see langword="null"/>.</param>
        </member>
        <member name="M:System.Collections.ArrayList.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.ArrayList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.ArrayList"/>. The value can be <see langword="null"/>.</param>
        </member>
        <member name="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ArrayList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:System.Collections.ArrayList.ToArray">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ArrayList"/> to a new <see cref="T:System.Object"/> array.
            </summary>
            <returns>An Object array containing copies of the elements of the <see cref="T:System.Collections.ArrayList"/>.</returns>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="M:System.Collections.ArrayList.ToArray(System.Type)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ArrayList"/> to a new array of the specified element type.
            </summary>
            <param name="type">The element Type of the destination array to create and copy elements to.</param>
            <returns>An array of the specified element type containing copies of the elements of the <see cref="T:System.Collections.ArrayList"/>.</returns>
        </member>
        <member name="T:System.Collections.ICollection">
            <summary>
            Defines size, enumerators, and synchronization methods for all nongeneric collections.
            </summary>
        </member>
        <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:System.Collections.ICollection.Count">
            <summary>
            Gets the number of elements contained in the ICollection.
            </summary>
            <value>
            The number of elements contained in the ICollection.
            </value>
        </member>
        <member name="P:System.Collections.ICollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ICollection.
            </summary>
            <value>
            An object that can be used to synchronize access to the ICollection.
            </value>
        </member>
        <member name="P:System.Collections.ICollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            </summary>
            <value>
            true if access to the ICollection is synchronized (thread safe); otherwise, false.
            </value>
        </member>
        <member name="T:System.Collections.IComparer">
            <summary>
            Exposes a method that compares two objects.
            </summary>
        </member>
        <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A signed integer that indicates the relative values of x and y, as shown in the following table.
            <para>Less than zero : x is less than y.</para>
            <para>Zero : x equals y.</para>
            <para>Greater than zero : x is greater than y.</para>
            </returns>
        </member>
        <member name="T:System.Collections.IEnumerable">
            <summary>
            Exposes an enumerator, which supports a simple iteration over a non-generic collection.
            </summary>
        </member>
        <member name="M:System.Collections.IEnumerable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:System.Collections.IEnumerator">
            <summary>
            Supports a simple iteration over a non-generic collection.
            </summary>
        </member>
        <member name="M:System.Collections.IEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:System.Collections.IEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>
            The element in the collection at the current position of the enumerator.
            </value>
        </member>
        <member name="M:System.Collections.IEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:System.Collections.IEqualityComparer">
            <summary>
            Defines methods to support the comparison of objects for equality.
            </summary>
        </member>
        <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The Object for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="T:System.Collections.IList">
            <summary>
            Represents a non-generic collection of objects that can be individually accessed by index.
            </summary>
        </member>
        <member name="P:System.Collections.IList.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <value>
            The element at the specified index.
            </value>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:System.Collections.IList.Add(System.Object)">
            <summary>
            Adds an item to the IList.
            </summary>
            <param name="value">The object to add to the IList.</param>
            <returns>The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</returns>
        </member>
        <member name="M:System.Collections.IList.Contains(System.Object)">
            <summary>
            Determines whether the IList contains a specific value.
            </summary>
            <param name="value">The object to locate in the IList.</param>
            <returns>true if the Object is found in the IList; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.IList.Clear">
            <summary>
            Removes all items from the IList.
            </summary>
        </member>
        <member name="P:System.Collections.IList.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
            <value>
            true if the IList is read-only; otherwise, false.
            </value>
        </member>
        <member name="P:System.Collections.IList.IsFixedSize">
            <summary>
            Gets a value indicating whether the IList has a fixed size.
            </summary>
            <value>
            true if the IList has a fixed size; otherwise, false.
            </value>
        </member>
        <member name="M:System.Collections.IList.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the IList.
            </summary>
            <param name="value">The object to locate in the IList.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the IList at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The object to insert into the IList.</param>
        </member>
        <member name="M:System.Collections.IList.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the IList.
            </summary>
            <param name="value">The object to remove from the IList.</param>
        </member>
        <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
            <summary>
            Removes the IList item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="T:System.ComponentModel.EditorBrowsableState">
            <summary>
            Specifies the browsable state of a property or method from within an editor.
            </summary>
        </member>
        <member name="F:System.ComponentModel.EditorBrowsableState.Always">
            <summary>
            The property or method is always browsable from within an editor.
            </summary>
        </member>
        <member name="F:System.ComponentModel.EditorBrowsableState.Never">
            <summary>
            The property or method is never browsable from within an editor.
            </summary>
        </member>
        <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
            <summary>
            The property or method is a feature that only advanced users should see. An editor can either show or hide such properties.
            </summary>
        </member>
        <member name="T:System.ComponentModel.EditorBrowsableAttribute">
            <summary>
            Specifies that a property or method is viewable in an editor. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
            <summary>
            Initializes a new instance of the EditorBrowsableAttribute class with State set to the default state.
            </summary>
        </member>
        <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
            <summary>
            Initializes a new instance of the EditorBrowsableAttribute class with an EditorBrowsableState.
            </summary>
            <param name="state">The EditorBrowsableState to set State to.</param>
        </member>
        <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current EditorBrowsableAttribute.
            </summary>
            <param name="obj">The object to test the value equality of.</param>
            <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
        </member>
        <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
            <summary>
            Gets the browsable state of the property or method.
            </summary>
            <value>An EditorBrowsableState that is the browsable state of the property or method.</value>
        </member>
        <member name="T:System.Base64FormattingOptions">
            <summary>
            Specifies whether relevant Convert.ToBase64CharArray and Convert.ToBase64String methods insert line breaks in their output.
            </summary>
        </member>
        <member name="F:System.Base64FormattingOptions.None">
            <summary>
            Does not insert line breaks after every 76 characters in the string representation.
            </summary>
        </member>
        <member name="F:System.Base64FormattingOptions.InsertLineBreaks">
            <summary>
            Inserts line breaks after every 76 characters in the string representation.
            </summary>
        </member>
        <member name="T:System.Convert">
            <summary>
            Converts a base data type to another base data type.
            </summary>
        </member>
        <member name="M:System.Convert.ToBoolean(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.
            </summary>
            <param name="value">The 8-bit unsigned integer to convert.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is not zero; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:System.Convert.ToChar(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.
            </summary>
            <param name="value">The 16-bit unsigned integer to convert.</param>
            <returns>A Unicode character that is equivalent to value.</returns>
        </member>
        <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
            <summary>
            Converts the specified string representation of a number to an equivalent 8-bit signed integer.
            </summary>
            <param name="value">A string that contains the number to convert.</param>
            <param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. See remark bellow about platform support.</param>
            <returns>An 8-bit signed integer that is equivalent to the number in value, or 0 (zero) if value is <see langword="null"/>.</returns>
            <remarks>
            The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, 
            which is supporting only conversions for base 10 values. In that case, any call using a <paramref name="fromBase"/> with a value other than 10 will throw a <see cref="T:System.NotImplementedException"/>.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16.</exception>
            <exception cref="T:System.NotImplementedException">If the platform doesn't have support to convert from non-base 10 values.</exception>
        </member>
        <member name="M:System.Convert.ToByte(System.String,System.Int32)">
            <summary>
            Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A string that contains the number to convert.</param>
            <param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. See remark bellow about platform support.</param>
            <returns>An 8-bit unsigned integer that is equivalent to value, or zero if value is <see langword="null"/>.</returns>
            <remarks>
            The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, 
            which is supporting only conversions for base 10 values. In that case, any call using a <paramref name="fromBase"/> with a value other than 10 will throw a <see cref="T:System.NotImplementedException"/>.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16.</exception>
            <exception cref="T:System.NotImplementedException">If the platform doesn't have support to convert from non-base 10 values.</exception>
        </member>
        <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
            <summary>
            Converts the specified string representation of a number to an equivalent 16-bit signed integer.
            </summary>
            <param name="value">A string that contains the number to convert.</param>
            <param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. See remark bellow about platform support.</param>
            <returns>A 16-bit signed integer that is equivalent to the number in value, or 0 (zero) if value is <see langword="null"/>.</returns>
            <remarks>
            The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, 
            which is supporting only conversions for base 10 values. In that case, any call using a <paramref name="fromBase"/> with a value other than 10 will throw a <see cref="T:System.NotImplementedException"/>.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16.</exception>
            <exception cref="T:System.NotImplementedException">If the platform doesn't have support to convert from non-base 10 values.</exception>
        </member>
        <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
            <summary>
            Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A string that contains the number to convert.</param>
            <param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. See remark bellow about platform support.</param>
            <returns>A 16-bit unsigned integer that is equivalent to the number in value, or 0 (zero) if value is <see langword="null"/>.</returns>
            <remarks>
            The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, 
            which is supporting only conversions for base 10 values. In that case, any call using a <paramref name="fromBase"/> with a value other than 10 will throw a <see cref="T:System.NotImplementedException"/>.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16.</exception>
            <exception cref="T:System.NotImplementedException">If the platform doesn't have support to convert from non-base 10 values.</exception>
        </member>
        <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
            <summary>
            Converts the specified string representation of a number to an equivalent 32-bit signed integer.
            </summary>
            <param name="value">A string that contains the number to convert.</param>
            <param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. See remark bellow about platform support.</param>
            <returns>A 32-bit signed integer that is equivalent to the number in value, or 0 (zero) if value is <see langword="null"/>.</returns>
            <remarks>
            The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, 
            which is supporting only conversions for base 10 values. In that case, any call using a <paramref name="fromBase"/> with a value other than 10 will throw a <see cref="T:System.NotImplementedException"/>.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16.</exception>
            <exception cref="T:System.NotImplementedException">If the platform doesn't have support to convert from non-base 10 values.</exception>
        </member>
        <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
            <summary>
            Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A string that contains the number to convert.</param>
            <param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. See remark bellow about platform support.</param>
            <returns>A 32-bit unsigned integer that is equivalent to the number in value, or 0 (zero) if value is <see langword="null"/>.</returns>
            <remarks>
            The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, 
            which is supporting only conversions for base 10 values. In that case, any call using a <paramref name="fromBase"/> with a value other than 10 will throw a <see cref="T:System.NotImplementedException"/>.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16.</exception>
            <exception cref="T:System.NotImplementedException">If the platform doesn't have support to convert from non-base 10 values.</exception>
        </member>
        <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
            <summary>
            Converts the specified string representation of a number to an equivalent 64-bit signed integer.
            </summary>
            <param name="value">A string that contains a number to convert.</param>
            <param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. See remark bellow about platform support.</param>
            <returns>A 64-bit signed integer that is equivalent to the number in value, or 0 (zero) if value is <see langword="null"/>.</returns>
            <remarks>
            The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, 
            which is supporting only conversions for base 10 values. In that case, any call using a <paramref name="fromBase"/> with a value other than 10 will throw a <see cref="T:System.NotImplementedException"/>.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16.</exception>
            <exception cref="T:System.NotImplementedException">If the platform doesn't have support to convert from non-base 10 values.</exception>
        </member>
        <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
            <summary>
            Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A string that contains the number to convert.</param>
            <param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. See remark bellow about platform support.</param>
            <returns>A 64-bit signed integer that is equivalent to the number in value, or 0 (zero) if value is <see langword="null"/>.</returns>
            <remarks>
            The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, 
            which is supporting only conversions for base 10 values. In that case, any call using a <paramref name="fromBase"/> with a value other than 10 will throw a <see cref="T:System.NotImplementedException"/>.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16.</exception>
            <exception cref="T:System.NotImplementedException">If the platform doesn't have support to convert from non-base 10 values.</exception>
        </member>
        <member name="M:System.Convert.ToDouble(System.String)">
            <summary>
            Converts the specified string representation of a number to an equivalent double-precision floating-point number.
            </summary>
            <param name="value">A string that contains the number to convert.</param>
            <returns>A double-precision floating-point number that is equivalent to the number in value, or 0 (zero) if value is <see langword="null"/>.</returns>
        </member>
        <member name="M:System.Convert.ToSingle(System.String)">
            <summary>
            Converts the specified string representation of a number to an equivalent single-precision floating-point number.
            </summary>
            <param name="value">A string that contains the number to convert.</param>
            <returns>A single-precision floating-point number that is equivalent to the number in value, or 0 (zero) if value is <see langword="null"/>.</returns>
        </member>
        <member name="M:System.Convert.ToBase64String(System.Byte[])">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent String representation encoded with base 64 digits.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers. </param>
            <returns>The String representation, in base 64, of the contents of <paramref name="inArray"/>.</returns>
        </member>
        <member name="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. A parameter specifies whether to insert line breaks in the return value.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers.</param>
            <param name="options"><see cref="F:System.Base64FormattingOptions.InsertLineBreaks"/> to insert a line break every 76 characters, or None to not insert line breaks.</param>
            <returns>The string representation in base 64 of the elements in <paramref name="inArray"/>.</returns>
        </member>
        <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers. </param>
            <param name="offset">An offset in <paramref name="inArray"/>.</param>
            <param name="length">The number of elements of <paramref name="inArray"/> to convert.</param>
            <returns>The string representation in base 64 of <paramref name="length"/> elements of <paramref name="inArray"/>, starting at position <paramref name="offset"/>.</returns>
        </member>
        <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
            <summary>
            Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers. </param>
            <param name="offset">An offset in <paramref name="inArray"/>.</param>
            <param name="length">The number of elements of <paramref name="inArray"/> to convert.</param>
            <param name="options">cref="System.InsertLineBreaks" to insert a line break every 76 characters, or None to not insert line breaks.</param>
            <returns>The string representation in base 64 of <paramref name="length"/> elements of <paramref name="inArray"/>, starting at position <paramref name="offset"/>.</returns>
        </member>
        <member name="M:System.Convert.FromBase64String(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.
            </summary>
            <param name="inString">The string to convert.</param>
            <returns>An array of 8-bit unsigned integers that is equivalent to <paramref name="inString"/></returns>
            <remarks>s is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", lowercase characters "a" to "z", numerals "0" to "9", and the symbols "+" and "/".
            The white-space characters, and their Unicode names and hexadecimal code points, are tab(CHARACTER TABULATION, U+0009), newline(LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank(SPACE, U+0020). An arbitrary number of white-space characters can appear in s because all white-space characters are ignored.
            The valueless character, "=", is used for trailing padding. The end of s can consist of zero, one, or two padding characters.
            </remarks>
        </member>
        <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
            <summary>
            Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.
            </summary>
            <param name="inArray">A Unicode character array.</param>
            <param name="offset">A position within <paramref name="inArray"/>.</param>
            <param name="length">The number of elements in <paramref name="inArray"/> to convert. </param>
            <returns>An array of 8-bit unsigned integers equivalent to <paramref name="length"/> elements at position <paramref name="offset"/> in <paramref name="inArray"/>.</returns>
        </member>
        <member name="T:System.DateTimeKind">
            <summary>
            Specifies whether a <see cref="T:System.DateTime"/> object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC.
            </summary>
            <remarks>
            nanoFramework doesn't support local time, only  UTC, so it's not possible to specify <see cref="F:System.DateTimeKind.Local"/>.
            </remarks>
        </member>
        <member name="F:System.DateTimeKind.Utc">
            <summary>
            The time represented is UTC.
            </summary>
        </member>
        <member name="F:System.DateTimeKind.Local">
            <summary>
            The time represented is local time.
            </summary>
            <remarks>
            nanoFramework doesn't support local time, so <see cref="F:System.DateTimeKind.Local"/> is provided to allow code reuse and keep consistency with full .NET framework.
            </remarks>
        </member>
        <member name="T:System.DateTime">
            <summary>
            Represents an instant in time, typically expressed as a date and time of day.
            </summary>
        </member>
        <member name="F:System.DateTime._ticksAtOrigin">
            Our origin is at 1601/01/01:00:00:00.000
            While desktop CLR's origin is at 0001/01/01:00:00:00.000.
            There are 504911232000000000 ticks between them which we are subtracting.
        </member>
        <member name="F:System.DateTime.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:System.DateTime"/>. This field is read-only.
            </summary>
            <remarks>The value of this constant is equivalent to 00:00:00.0000000, January 1, 1601.
            This value is specific to nanoFramework. .NET equivalent is 00:00:00.0000000 UTC, January 1, 0001, in the Gregorian calendar.
            </remarks>
        </member>
        <member name="F:System.DateTime.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:System.DateTime"/>. This field is read-only.
            </summary>
            <remarks>The value of this constant is equivalent to 23:59:59.9999999, December 31, 3000.
            This value is specific to nanoFramework. .NET equivalent is 23:59:59.9999999 UTC, December 31, 9999 in the Gregorian calendar.
            </remarks>
        </member>
        <member name="F:System.DateTime.UnixEpoch">
            <summary>
            Represents the Unix Epoch value. This field is read-only.
            </summary>
            <remarks>The value of this constant is equivalent to the <see cref="T:System.DateTime"/> corresponding to 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC).
            This value is specific to nanoFramework.
            </remarks>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to a specified number of ticks.
            </summary>
            <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ticks"/> - Ticks must be between <see cref="F:System.DateTime.MinValue"/> and <see cref="F:System.DateTime.MaxValue"/>.</exception>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to a specified number of ticks and to Coordinated Universal Time (UTC).
            </summary>
            <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals. </param>
            <param name="kind">One of the enumeration values that indicates whether ticks specifies a local time, Coordinated Universal Time (UTC), or neither.</param>
            <remarks>
            nanoFramework doesn't support local time, only  UTC, so it's not possible to specify <see cref="F:System.DateTimeKind.Local"/>.
            </remarks>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year, month, and day.
            </summary>
            <param name="year">The year (1601 through 3000). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year, month, day, hour, minute, and second.
            </summary>
            <param name="year">The year (1601 through 3000). </param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year, month, day, hour, minute, second, and millisecond.
            </summary>
            <param name="year">The year (1601 through 3000). </param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
            <param name="millisecond">The milliseconds (0 through 999). </param>
            <exception cref="T:System.ArgumentOutOfRangeException">Any parameter out of the accepted ranges</exception>
        </member>
        <member name="M:System.DateTime.Add(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the value of the specified <see cref="T:System.TimeSpan"/> to the value of this instance.
            </summary>
            <param name="val">A positive or negative time interval. </param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="val"/>.</returns>
        </member>
        <member name="M:System.DateTime.AddDays(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of days to the value of this instance.
            </summary>
            <param name="val">A number of whole and fractional days. The <paramref name="val"/> parameter can be negative or positive. </param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name="val"/>.</returns>
        </member>
        <member name="M:System.DateTime.AddHours(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of hours to the value of this instance.
            </summary>
            <param name="val">A number of whole and fractional hours. The <paramref name="val"/> parameter can be negative or positive. </param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="val"/>.</returns>
        </member>
        <member name="M:System.DateTime.AddMilliseconds(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of milliseconds to the value of this instance.
            </summary>
            <param name="val">A number of whole and fractional milliseconds. The <paramref name="val"/> parameter can be negative or positive. Note that this value is rounded to the nearest integer.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name="val"/>.</returns>
        </member>
        <member name="M:System.DateTime.AddMinutes(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of minutes to the value of this instance.
            </summary>
            <param name="val">A number of whole and fractional minutes. The <paramref name="val"/> parameter can be negative or positive. </param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="val"/>.</returns>
        </member>
        <member name="M:System.DateTime.AddSeconds(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of seconds to the value of this instance.
            </summary>
            <param name="val">A number of whole and fractional seconds. The <paramref name="val"/> parameter can be negative or positive. </param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name="val"/>.</returns>
        </member>
        <member name="M:System.DateTime.AddTicks(System.Int64)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of ticks to the value of this instance.
            </summary>
            <param name="val">A number of 100-nanosecond ticks. The <paramref name="val"/> parameter can be positive or negative. </param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the time represented by <paramref name="val"/>.</returns>
        </member>
        <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
            <summary>
            Compares two instances of <see cref="T:System.DateTime"/> and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.
            </summary>
            <param name="t1">The first object to compare. </param>
            <param name="t2">The second object to compare. </param>
            <returns>A signed number indicating the relative values of <paramref name="t1"/> and <paramref name="t2"/>.</returns>
        </member>
        <member name="M:System.DateTime.CompareTo(System.Object)">
            <summary>
            Compares the value of this instance to a specified object that contains a specified <see cref="T:System.DateTime"/> value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="val">A boxed object to compare, or null reference (Nothing in Visual Basic).</param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
            <summary>
            Returns the number of days in the specified month and year.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month (a number ranging from 1 to 12). </param>
            <returns>The number of days in month for the specified year.
            For example, if month equals 2 for February, the return value is 28 or 29 depending upon whether year is a leap year.</returns>
        </member>
        <member name="M:System.DateTime.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare to this instance. </param>
            <returns>true if <paramref name="obj"/> is an instance of <see cref="T:System.DateTime"/> and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
            <summary>
            Returns a value indicating whether two <see cref="T:System.DateTime"/> instances have the same date and time value.
            </summary>
            <param name="t1">The first object to compare. </param>
            <param name="t2">The second object to compare. </param>
            <returns>true if the two values are equal; otherwise, false.</returns>
        </member>
        <member name="P:System.DateTime.Date">
            <summary>
            Gets the date component of this instance.
            </summary>
            <value>
            A new object with the same date as this instance, and the time value set to 12:00:00 midnight (00:00:00).
            </value>
        </member>
        <member name="P:System.DateTime.Day">
            <summary>
            Gets the day of the month represented by this instance.
            </summary>
            <value>
            The day component, expressed as a value between 1 and 31.
            </value>
        </member>
        <member name="P:System.DateTime.DayOfWeek">
            <summary>
            Gets the day of the week represented by this instance.
            </summary>
            <value>
            An enumerated constant that indicates the day of the week of this <see cref="T:System.DateTime"/> value.
            </value>
        </member>
        <member name="P:System.DateTime.DayOfYear">
            <summary>
            Gets the day of the year represented by this instance.
            </summary>
            <value>
            The day of the year, expressed as a value between 1 and 366.
            </value>
        </member>
        <member name="P:System.DateTime.Hour">
            <summary>
            Gets the hour component of the date represented by this instance.
            </summary>
            <value>
            The hour component, expressed as a value between 0 and 23.
            </value>
        </member>
        <member name="P:System.DateTime.Kind">
            <summary>
            Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.
            </summary>
            <value>
            One of the enumeration values that indicates what the current time represents.
            </value>
            <remarks>
            Despite the default in the full .NET Framework is <see cref="F:System.DateTimeKind.Local"/> this won't never happen because nanoFramework only supports UTC time.
            </remarks>
        </member>
        <member name="P:System.DateTime.Millisecond">
            <summary>
            Gets the milliseconds component of the date represented by this instance.
            </summary>
            <value>
            The milliseconds component, expressed as a value between 0 and 999.
            </value>
        </member>
        <member name="P:System.DateTime.Minute">
            <summary>
            Gets the minute component of the date represented by this instance.
            </summary>
            <value>
            The minute component, expressed as a value between 0 and 59.
            </value>
        </member>
        <member name="P:System.DateTime.Month">
            <summary>
            Gets the month component of the date represented by this instance.
            </summary>
            <value>
            The month component, expressed as a value between 1 and 12.
            </value>
        </member>
        <member name="P:System.DateTime.UtcNow">
            <summary>
            Gets a <see cref="T:System.DateTime"/> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).
            </summary>
            <value>
            An object whose value is the current UTC date and time.
            </value>
        </member>
        <member name="P:System.DateTime.Second">
            <summary>
            Gets the seconds component of the date represented by this instance.
            </summary>
            <value>
            The seconds component, expressed as a value between 0 and 59.
            </value>
        </member>
        <member name="P:System.DateTime.Ticks">
            <summary>
            Gets the number of ticks that represent the date and time of this instance.
            </summary>
            <value>
            The number of ticks that represent the date and time of this instance. The value is between DateTime.MinValue.Ticks and DateTime.MaxValue.Ticks
            </value>
        </member>
        <member name="P:System.DateTime.TimeOfDay">
            <summary>
            Gets the time of day for this instance.
            </summary>
            <value>
            A time interval that represents the fraction of the day that has elapsed since midnight.
            </value>
        </member>
        <member name="P:System.DateTime.Today">
            <summary>
            Gets the current date.
            </summary>
            <value>
            An object that is set to today's date, with the time component set to 00:00:00.
            </value>
        </member>
        <member name="P:System.DateTime.Year">
            <summary>
            Gets the year component of the date represented by this instance.
            </summary>
            <value>
            The year, between 1 and 9999.
            </value>
        </member>
        <member name="M:System.DateTime.Subtract(System.DateTime)">
            <summary>
            Subtracts the specified date and time from this instance.
            </summary>
            <param name="val">The date and time value to subtract. </param>
            <returns>A time interval that is equal to the date and time represented by this instance minus the date and time represented by <paramref name="val"/>.</returns>
        </member>
        <member name="M:System.DateTime.Subtract(System.TimeSpan)">
            <summary>
            Subtracts the specified duration from this instance.
            </summary>
            <param name="val">The time interval to subtract. </param>
            <returns>An object that is equal to the date and time represented by this instance minus the time interval represented by <paramref name="val"/>.</returns>
        </member>
        <member name="M:System.DateTime.ToString">
            <summary>
            Converts the value of the current <see cref="T:System.DateTime"/> object to its equivalent string representation.
            </summary>
            <returns>A string representation of the value of the current <see cref="T:System.DateTime"/> object.</returns>
        </member>
        <member name="M:System.DateTime.ToString(System.String)">
            <summary>
            Converts the value of the current <see cref="T:System.DateTime"/> object to its equivalent string representation using the specified format.
            </summary>
            <param name="format">A standard or custom date and time format string (see Remarks). </param>
            <returns>A string representation of value of the current DateTime object as specified by format.</returns>
        </member>
        <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
            <summary>
            Adds a specified time interval to a specified date and time, yielding a new date and time.
            </summary>
            <param name="d">The date and time value to add. </param>
            <param name="t">The time interval to add. </param>
            <returns>
            An object that is the sum of the values of <paramref name="d"/> and <paramref name="t"/>.
            </returns>
        </member>
        <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
            <summary>
            Subtracts a specified time interval from a specified date and time and returns a new date and time.
            </summary>
            <param name="d">The date and time value to subtract from. </param>
            <param name="t">The time interval to subtract. </param>
            <returns>
            An object whose value is the value of <paramref name="d"/> minus the value of <paramref name="t"/>.
            </returns>
        </member>
        <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
            <summary>
            Subtracts a specified date and time from another specified date and time and returns a time interval.
            </summary>
            <param name="d1">The date and time value to subtract from (the minuend). </param>
            <param name="d2">The date and time value to subtract (the subtrahend). </param>
            <returns>
            The time interval between <paramref name="d1"/> and <paramref name="d2"/>; that is, <paramref name="d1"/> minus <paramref name="d2"/>.
            </returns>
        </member>
        <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
            <summary>
            Determines whether two specified instances of <see cref="T:System.DateTime"/> are equal.
            </summary>
            <param name="d1">The first object to compare. </param>
            <param name="d2">The second object to compare. </param>
            <returns>
            true if <paramref name="d1"/> and <paramref name="d2"/> represent the same date and time; otherwise, false.
            </returns>
        </member>
        <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
            <summary>
            Determines whether two specified instances of <see cref="T:System.DateTime"/> are not equal.
            </summary>
            <param name="t1">The first object to compare. </param>
            <param name="t2">The second object to compare. </param>
            <returns>
            true if <paramref name="t1"/> and <paramref name="t2"/> do not represent the same date and time; otherwise, false.
            </returns>
        </member>
        <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
            <summary>
            Determines whether one specified <see cref="T:System.DateTime"/> is less than another specified <see cref="T:System.DateTime"/>.
            </summary>
            <param name="t1">The first object to compare. </param>
            <param name="t2">The second object to compare. </param>
            <returns>
            true if <paramref name="t1"/> is less than <paramref name="t2"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
            <summary>
            Determines whether one specified <see cref="T:System.DateTime"/> is less than or equal to another specified DateTime.
            </summary>
            <param name="t1">The first object to compare. </param>
            <param name="t2">The second object to compare. </param>
            <returns>
            true if <paramref name="t1"/> is less than or equal to <paramref name="t2"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
            <summary>
            Determines whether one specified DateTime is greater than another specified DateTime.
            </summary>
            <param name="t1">The first object to compare. </param>
            <param name="t2">The second object to compare. </param>
            <returns>
            true if <paramref name="t1"/> is greater than <paramref name="t2"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
            <summary>
            Determines whether one specified <see cref="T:System.DateTime"/> is greater than or equal to another specified DateTime.
            </summary>
            <param name="t1">The first object to compare. </param>
            <param name="t2">The second object to compare. </param>
            <returns>
            true if <paramref name="t1"/> is greater than or equal to <paramref name="t2"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:System.DateTime.FromUnixTimeSeconds(System.Int64)">
            <summary>
            Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="seconds">A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.</param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <remarks>
            This method is exclusive of nanoFramework.
            </remarks>
        </member>
        <member name="M:System.DateTime.ToUnixTimeSeconds">
            <summary>
            Returns the number of seconds that have elapsed since 1970-01-01T00:00:00Z.
            </summary>
            <returns>The number of seconds that have elapsed since 1970-01-01T00:00:00Z.</returns>
            <remarks>
            Unix time represents the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). It does not take leap seconds into account.
            
            This method is exclusive of nanoFramework.
            </remarks>
        </member>
        <member name="M:System.DateTime.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:System.DayOfWeek">
            <summary>
            Specifies the day of the week.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Sunday">
            <summary>
            Indicates Sunday
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Monday">
            <summary>
            Indicates Monday
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Tuesday">
            <summary>
            Indicates Tuesday
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Wednesday">
            <summary>
            Indicates Wednesday
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Thursday">
            <summary>
            Indicates Thursday
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Friday">
            <summary>
            Indicates Friday
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Saturday">
            <summary>
            Indicates Saturday
            </summary>
        </member>
        <member name="T:System.DBNull">
            <summary>
            Represents a nonexistent value. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:System.DBNull.Value">
            <summary>
            Represents the sole instance of the DBNull class.
            </summary>
            <remarks>DBNull is a singleton class, which means only this instance of this class can exist.</remarks>
        </member>
        <member name="T:System.Delegate">
            <summary>
            Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.
            </summary>
        </member>
        <member name="M:System.Delegate.Equals(System.Object)">
            <summary>
            Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.
            </summary>
            <param name="obj">The object to compare with the current delegate. </param>
            <returns>true if obj and the current delegate have the same targets, methods, and invocation list; otherwise, false.</returns>
        </member>
        <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
            <summary>
            Concatenates the invocation lists of two delegates.
            </summary>
            <param name="a">The delegate whose invocation list comes first. </param>
            <param name="b">The delegate whose invocation list comes last. </param>
            <returns>A new delegate with an invocation list that concatenates the invocation lists of a and b in that order. Returns a if b is  null reference (Nothing in Visual Basic), returns b if a is a null reference, and returns a null reference if both a and b are null references.</returns>
        </member>
        <member name="P:System.Delegate.Method">
            <summary>
            Gets the method represented by the delegate.
            </summary>
            <value>
            A MethodInfo describing the method represented by the delegate.
            </value>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="M:System.Delegate.GetInvocationList">
            <summary>
            Returns the invocation list of the delegate.
            </summary>
            <returns>
            An array of delegates representing the invocation list of the current delegate.
            </returns>
        </member>
        <member name="P:System.Delegate.Target">
            <summary>
            Gets the class instance on which the current delegate invokes the instance method.
            </summary>
            <value>
            The object on which the current delegate invokes the instance method, if the delegate represents an instance method;  null reference (Nothing in Visual Basic) if the delegate represents a static method.
            </value>
        </member>
        <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
            <summary>
            Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.
            </summary>
            <param name="source">The delegate from which to remove the invocation list of value.</param>
            <param name="value">The delegate that supplies the invocation list to remove from the invocation list of source.</param>
            <returns>A new delegate with an invocation list formed by taking the invocation list of source and removing the last occurrence of the invocation list of value, if the invocation list of value is found within the invocation list of source. Returns source if value is  null reference (Nothing in Visual Basic) or if the invocation list of value is not found within the invocation list of source. Returns a null reference if the invocation list of value is equal to the invocation list of source or if source is a null reference.</returns>
        </member>
        <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
            <summary>
            Determines whether the specified delegates are equal.
            </summary>
            <param name="d1">The first delegate to compare.</param>
            <param name="d2">The second delegate to compare. </param>
            <returns>true if d1 is equal to d2; otherwise, false.</returns>
        </member>
        <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
            <summary>
            Determines whether the specified delegates are not equal.
            </summary>
            <param name="d1">The first delegate to compare.</param>
            <param name="d2">The second delegate to compare. </param>
            <returns>true if d1 is not equal to d2; otherwise, false.</returns>
        </member>
        <member name="T:System.Diagnostics.ConditionalAttribute">
            <summary>
            Indicates to compilers that a method call or attribute should be ignored unless a specified conditional compilation symbol is defined.
            </summary>
        </member>
        <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConditionalAttribute class.
            </summary>
            <param name="conditionString">A string that specifies the case-sensitive conditional compilation symbol that is associated with the attribute.</param>
        </member>
        <member name="P:System.Diagnostics.ConditionalAttribute.ConditionString">
            <summary>
            Gets the conditional compilation symbol that is associated with the ConditionalAttribute attribute.
            </summary>
            <value>A string that specifies the case-sensitive conditional compilation symbol that is associated with the ConditionalAttribute attribute.</value>
        </member>
        <member name="T:System.Diagnostics.Debug">
            <summary>
            Provides a set of methods and properties that help debug your code.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Debug.Assert(System.Boolean)">
            <summary>
            Causes a break in execution if the specified assertion (condition) evaluates to false.
            </summary>
            <param name="condition">The condition to be evaluated. If the value is false, program execution stops.</param>
        </member>
        <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)">
            <summary>
            Causes a break in execution if the specified assertion (condition) evaluates to false.
            </summary>
            <param name="condition">The condition to be evaluated. If the value is false, program execution stops.</param>
            <param name="message">The text to be output if the assertion is false.</param>
        </member>
        <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)">
            <summary>
            Causes a break in execution if the specified assertion (condition) evaluates to false.
            </summary>
            <param name="condition">The condition to be evaluated. If the value is false, program execution stops.</param>
            <param name="message">The text to be output if the assertion is false.</param>
            <param name="detailedMessage">The detailed message to be displayed if the assertion is false.</param>
        </member>
        <member name="M:System.Diagnostics.Debug.Write(System.String)">
            <summary>
            Writes a message to the trace listeners in the Listeners collection.
            </summary>
            <param name="message">A message to write.</param>
            <remarks>
            In nanoFramework implementation the message is output to Visual Studio debugger window.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
            <summary>
            Writes a message followed by a line terminator to the trace listeners in the Listeners collection.
            </summary>
            <param name="message">A message to write.</param>
            <remarks>
            In nanoFramework implementation the message is output to Visual Studio debugger window.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.Debugger">
            <summary>
            Enables communication with a debugger. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:System.Diagnostics.Debugger.IsAttached">
            <summary>
            Gets a value that indicates whether a debugger is attached to the process.
            </summary>
            <value>true if a debugger is attached; otherwise, false.</value>
        </member>
        <member name="M:System.Diagnostics.Debugger.Break">
            <summary>
            Signals a breakpoint to an attached debugger.
            </summary>
        </member>
        <member name="T:System.Diagnostics.DebuggerStepThroughAttribute">
            <summary>
            Identifies a type or member that is not part of the user code for an application.
            </summary>
            <remarks>
            Designer provided types and members that are not part of the code specifically created by the user can complicate the debugging experience. This attribute suppresses the display of these adjunct types and members in the debugger window and automatically steps through, rather than into, designer provided code. When the debugger encounters this attribute when stepping through user code, the user experience is to not see the designer provided code and to step to the next user-supplied code statement.
            The debugger behaviour when the <see cref="T:System.Diagnostics.DebuggerNonUserCodeAttribute"/> is present is similar to using a combination of the <see cref="T:System.Diagnostics.DebuggerHiddenAttribute"/> attribute, which hides the code from the debugger, and the <see cref="T:System.Diagnostics.DebuggerStepThroughAttribute"/> attribute, which tells the debugger to step through, rather than into, the code it is applied to.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.DebuggerStepThroughAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerNonUserCodeAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.DebuggerStepperBoundaryAttribute">
            <summary>
            Indicates the code following the attribute is to be executed in run, not step, mode.
            </summary>
            <remarks>
            The <see cref="T:System.Diagnostics.DebuggerStepperBoundaryAttribute"/> attribute is used as an escape from the effect of a <see cref="T:System.Diagnostics.DebuggerNonUserCodeAttribute"/>. When executing within the boundaries of the <see cref="T:System.Diagnostics.DebuggerNonUserCodeAttribute"/>, designer-provided code is executed as a step-through until the next user supplied code is encountered. When context switches are made on a thread, the next user-supplied code module stepped into may not relate to the code that was in the process of being debugged. To avoid this debugging experience, use the <see cref="T:System.Diagnostics.DebuggerStepperBoundaryAttribute"/> to escape from stepping through code to running code. For example, in Visual Studio 2005, encountering a <see cref="T:System.Diagnostics.DebuggerStepperBoundaryAttribute"/> while stepping through code using the F10 key (or Step Over command) has the same effect as pressing the F5 key or using the Start Debugging command.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.DebuggerStepperBoundaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerStepperBoundaryAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.DebuggerHiddenAttribute">
            <summary>
            Specifies the DebuggerHiddenAttribute. This class cannot be inherited.
            </summary>
            <remarks>
            The common language runtime attaches no semantics to this attribute. It is provided for use by source code debuggers. For example, the Visual Studio 2005 debugger does not stop in a method marked with this attribute and does not allow a breakpoint to be set in the method. Other debugger attributes recognized by the Visual Studio 2005 debugger are the <see cref="T:System.Diagnostics.DebuggerNonUserCodeAttribute"/> and the <see cref="T:System.Diagnostics.DebuggerStepThroughAttribute"/>. 
            </remarks>
        </member>
        <member name="M:System.Diagnostics.DebuggerHiddenAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerHiddenAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.DebuggerNonUserCodeAttribute">
            <summary>
            Identifies a type or member that is not part of the user code for an application.
            </summary>
            <remarks>
            Designer provided types and members that are not part of the code specifically created by the user can complicate the debugging experience. This attribute suppresses the display of these adjunct types and members in the debugger window and automatically steps through, rather than into, designer provided code. When the debugger encounters this attribute when stepping through user code, the user experience is to not see the designer provided code and to step to the next user-supplied code statement. 
            The debugger behaviour when the <see cref="T:System.Diagnostics.DebuggerNonUserCodeAttribute"/> is present is similar to using a combination of the <see cref="T:System.Diagnostics.DebuggerHiddenAttribute"/> attribute, which hides the code from the debugger, and the <see cref="T:System.Diagnostics.DebuggerStepThroughAttribute"/> attribute, which tells the debugger to step through, rather than into, the code it is applied to.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.DebuggerNonUserCodeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerNonUserCodeAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.DebuggableAttribute">
            <summary>
            Modifies code generation for runtime just-in-time (JIT) debugging. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:System.Diagnostics.DebuggableAttribute.DebuggingModes">
            <summary>
            Specifies the debugging mode for the just-in-time (JIT) compiler.
            </summary>
        </member>
        <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None">
            <summary>
            Starting with the .NET Framework version 2.0, JIT tracking information is always generated, and this flag has the same effect as Default,
            except that it sets the DebuggableAttribute.IsJITTrackingEnabled property to false. However, because JIT tracking is always enabled, 
            the property value is ignored in version 2.0 or later.
            Note that, unlike the None flag, the None flag cannot be used to disable JIT optimizations.
            </summary>
        </member>
        <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default">
            <summary>
            Instructs the just-in-time (JIT) compiler to use its default behaviour, which includes enabling optimizations, disabling Edit and Continue support,
            and using symbol store sequence points if present. Starting with the .NET Framework version 2.0, JIT tracking information, the Microsoft intermediate
            language (MSIL) offset to the native-code offset within a method, is always generated.
            </summary>
        </member>
        <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations">
            <summary>
            Disable optimizations performed by the compiler to make your output file smaller, faster, and more efficient. Optimizations result in code rearrangement
            in the output file, which can make debugging difficult. Typically optimization should be disabled while debugging. In versions 2.0 or later, combine this
            value with Default (Default | DisableOptimizations) to enable JIT tracking and disable optimizations.
            </summary>
        </member>
        <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints">
            <summary>
            Use the implicit MSIL sequence points, not the program database (PDB) sequence points. The symbolic information normally includes at least one 
            Microsoft intermediate language (MSIL) offset for each source line. When the just-in-time (JIT) compiler is about to compile a method, it asks 
            the profiling services for a list of MSIL offsets that should be preserved. These MSIL offsets are called sequence points.
            </summary>
        </member>
        <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue">
            <summary>
            Enable edit and continue. Edit and continue enables you to make changes to your source code while your program is in break mode. The ability to edit and continue is compiler dependent.
            </summary>
        </member>
        <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DebuggableAttribute class, using the specified tracking and optimization options for the just-in-time (JIT) compiler.
            </summary>
            <param name="isJITTrackingEnabled">true to enable debugging; otherwise, false.</param>
            <param name="isJITOptimizerDisabled">true to disable the optimizer for execution; otherwise, false.</param>
        </member>
        <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)">
            <summary>
            Initializes a new instance of the DebuggableAttribute class, using the specified debugging modes for the just-in-time (JIT) compiler.
            </summary>
            <param name="modes">A bitwise combination of the DebuggableAttribute.DebuggingModes values specifying the debugging mode for the JIT compiler.</param>
        </member>
        <member name="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled">
            <summary>
            Gets a value that indicates whether the runtime will track information during code generation for the debugger.
            </summary>
            <value>true if the runtime will track information during code generation for the debugger; otherwise, false.</value>
        </member>
        <member name="P:System.Diagnostics.DebuggableAttribute.IsJITOptimizerDisabled">
            <summary>
            Gets a value that indicates whether the runtime optimizer is disabled.
            </summary>
            <value>true if the runtime optimizer is disabled; otherwise, false.</value>
        </member>
        <member name="P:System.Diagnostics.DebuggableAttribute.DebuggingFlags">
            <summary>
            Gets the debugging modes for the attribute.
            </summary>
            <value>A bitwise combination of the DebuggableAttribute.DebuggingModes values describing the debugging mode for the just-in-time (JIT) compiler. The default is Default.</value>
        </member>
        <member name="T:System.Diagnostics.DebuggerBrowsableState">
            <summary>
            Provides display instructions for the debugger.
            </summary>
        </member>
        <member name="F:System.Diagnostics.DebuggerBrowsableState.Never">
            <summary>
            Never show the element.
            </summary>
        </member>
        <member name="F:System.Diagnostics.DebuggerBrowsableState.Collapsed">
            <summary>
            Show the element as collapsed.
            </summary>
        </member>
        <member name="F:System.Diagnostics.DebuggerBrowsableState.RootHidden">
            <summary>
            Do not display the root element; display the child elements if the element is a collection or array of items.
            </summary>
        </member>
        <member name="T:System.Diagnostics.DebuggerBrowsableAttribute">
            <summary>
            Determines if and how a member is displayed in the debugger variable windows. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Diagnostics.DebuggerBrowsableAttribute.#ctor(System.Diagnostics.DebuggerBrowsableState)">
            <summary>
            Initializes a new instance of the DebuggerBrowsableAttribute class.
            </summary>
            <param name="state">One of the DebuggerBrowsableState values that specifies how to display the member.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:System.Diagnostics.DebuggerBrowsableAttribute.State">
            <summary>
            Gets the display state for the attribute.
            </summary>
            <value>One of the DebuggerBrowsableState values.</value>
        </member>
        <member name="T:System.Diagnostics.DebuggerTypeProxyAttribute">
            <summary>
            Specifies the display proxy for a type.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="M:System.Diagnostics.DebuggerTypeProxyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the DebuggerTypeProxyAttribute class using the type of the proxy.
            </summary>
            <param name="type">The proxy type.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:System.Diagnostics.DebuggerTypeProxyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DebuggerTypeProxyAttribute class using the type name of the proxy.
            </summary>
            <param name="typeName">The type name of the proxy type.</param>
        </member>
        <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.ProxyTypeName">
            <summary>
            Gets the type name of the proxy type.
            </summary>
            <value>The type name of the proxy type.</value>
        </member>
        <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.Target">
            <summary>
            Gets or sets the target type for the attribute.
            </summary>
            <value>The target type for the attribute.</value>
            <exception cref="T:System.ArgumentNullException">Target is set to null.</exception>
        </member>
        <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.TargetTypeName">
            <summary>
            Gets or sets the name of the target type.
            </summary>
            <value>
            The name of the target type.
            </value>
        </member>
        <member name="T:System.Diagnostics.DebuggerDisplayAttribute">
            <summary>
            Determines how a class or field is displayed in the debugger variable windows.
            </summary>
        </member>
        <member name="M:System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DebuggerDisplayAttribute class.
            </summary>
            <param name="value">The string to be displayed in the value column for instances of the type; an empty string ("") causes the value column to be hidden.</param>
        </member>
        <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Value">
            <summary>
            Gets the string to display in the value column of the debugger variable windows.
            </summary>
            <value>The string to display in the value column of the debugger variable.</value>
        </member>
        <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Name">
            <summary>
            Gets or sets the name to display in the debugger variable windows.
            </summary>
            <value>The name to display in the debugger variable windows.</value>
        </member>
        <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Type">
            <summary>
            Gets or sets the string to display in the type column of the debugger variable windows.
            </summary>
            <value>The string to display in the type column of the debugger variable windows.</value>
        </member>
        <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Target">
            <summary>
            Gets or sets the type of the attribute's target.
            </summary>
            <value>The attribute's target type.</value>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="P:System.Diagnostics.DebuggerDisplayAttribute.TargetTypeName">
            <summary>
            Gets or sets the type name of the attribute's target.
            </summary>
            <value>The name of the attribute's target type.</value>
        </member>
        <member name="T:System.Double">
            <summary>
            Represents a double-precision floating-point number.
            </summary>
        </member>
        <member name="F:System.Double.MinValue">
            <summary>
            Represents the smallest possible value of a Double. This field is constant.
            </summary>
            <remarks>The value of this constant is negative 1.7976931348623157E+308.</remarks>
        </member>
        <member name="F:System.Double.MaxValue">
            <summary>
            Represents the largest possible value of a Double. This field is constant.
            </summary>
            <remarks>The value of this constant is positive 1.7976931348623157E+308.</remarks>
        </member>
        <member name="F:System.Double.Epsilon">
            <summary>
            Represents the smallest positive Double value that is greater than zero. This field is constant.
            </summary>
            <remarks>The value of this constant is 4.94065645841247e-324.</remarks>
        </member>
        <member name="F:System.Double.NegativeInfinity">
            <summary>
            Represents negative infinity. This field is constant.
            </summary>
        </member>
        <member name="F:System.Double.PositiveInfinity">
            <summary>
            Represents positive infinity. This field is constant.
            </summary>
        </member>
        <member name="F:System.Double.NaN">
            <summary>
            Represents a value that is not a number (NaN). This field is constant.
            </summary>
        </member>
        <member name="M:System.Double.CompareTo(System.Double)">
            <summary>
            Compares this instance to a specified double-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified double-precision floating-point number.
            </summary>
            <param name="value">A double-precision floating-point number to compare.</param>
            <returns>A signed number indicating the relative values of this instance and value.
            Less than zero: This instance is less than value. -or- This instance is not a number (<see cref="F:System.Double.NaN"/>) and value is a number.
            Zero: This instance is equal to value. -or- Both this instance and value are not a number (<see cref="F:System.Double.NaN"/>), <see cref="F:System.Double.PositiveInfinity"/>, or <see cref="F:System.Double.NegativeInfinity"/>. 
            Greater than zero: This instance is greater than value. -or- This instance is a number and value is not a number (<see cref="F:System.Double.NaN"/>). 
            </returns>
        </member>
        <member name="M:System.Double.IsInfinity(System.Double)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative or positive infinity
            </summary>
            <param name="d">A double-precision floating-point number. </param>
            <returns>
            true if d evaluates to PositiveInfinity or NegativeInfinity; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Double.IsNaN(System.Double)">
            <summary>
            Returns a value that indicates whether the specified value is not a number (NaN).
            </summary>
            <param name="d">A double-precision floating-point number. </param>
            <returns>
            true if d evaluates to NaN; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Double.IsNegativeInfinity(System.Double)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative infinity.
            </summary>
            <param name="d">A double-precision floating-point number.</param>
            <returns>
            true if d evaluates to NegativeInfinity; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Double.IsPositiveInfinity(System.Double)">
            <summary>
            Returns a value indicating whether the specified number evaluates to positive infinity.
            </summary>
            <param name="d">A double-precision floating-point number. </param>
            <returns>
            true if d evaluates to PositiveInfinity; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Double.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its double-precision floating-point number equivalent.
            </summary>
            <param name="s">A string that contains a number to convert. </param>
            <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in s.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:System.Double.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:System.Double.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using the specified format.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>The string representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:System.Double.TryParse(System.String,System.Double@)">
            <summary>
            Converts the string representation of a number to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert. </param>
            <param name="result">When this method returns, contains the double-precision floating-point number equivalent to the s parameter, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is  null reference (Nothing in Visual Basic), is not a number in a valid format, or represents a number less than MinValue or greater than MaxValue. This parameter is passed uninitialized.</param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="T:System.Enum">
            <summary>
            Provides the base class for enumerations.
            </summary>
        </member>
        <member name="M:System.Enum.HasFlag(System.Enum)">
            <summary>
            Determines whether one or more bit fields are set in the current instance.
            </summary>
            <param name="flag">An enumeration value.</param>
            <returns><see langword="true"/> if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="flag"/> is a different type than the current instance.</exception>
        </member>
        <member name="M:System.Enum.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="T:System.Console">
            <summary>
            Represents the standard input, output, and error streams for console applications. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Console.Write(System.String)">
            <summary>
            Writes the specified string value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:System.EventArgs">
            <summary>
            Represents the base class for classes that contain event data, and provides a value to use for events that do not include event data.
            </summary>
        </member>
        <member name="F:System.EventArgs.Empty">
            <summary>
            Provides a value to use with events that do not have event data.
            </summary>
        </member>
        <member name="M:System.EventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.EventArgs"/> class.
            </summary>
        </member>
        <member name="T:System.EventHandler">
            <summary>
            Represents the method that will handle an event that has no event data.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An object that contains no event data.</param>
        </member>
        <member name="T:System.EventHandler`1">
            <summary>
            Represents the method that will handle an event when the event provides data.
            </summary>
            <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
            <param name="sender">The source of the event.</param>
            <param name="e">An object that contains the event data.</param>
        </member>
        <member name="T:System.Exception">
            <summary>
            Represents errors that occur during application execution.
            </summary>
        </member>
        <member name="F:System.Exception.HResult">
            <summary>
            Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.
            </summary>
            <value>The HRESULT value./// </value>
        </member>
        <member name="M:System.Exception.#ctor">
            <summary>
            Initializes a new instance of the Exception class.
            </summary>
        </member>
        <member name="M:System.Exception.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:System.Exception.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="P:System.Exception.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value>
            The error message that explains the reason for the exception, or an empty string("").
            </value>
        </member>
        <member name="P:System.Exception.InnerException">
            <summary>
            Gets the Exception instance that caused the current exception.
            </summary>
            <value>
            An instance of Exception that describes the error that caused the current exception. The InnerException property returns the same value as was passed into the constructor, or a null reference (Nothing in Visual Basic) if the inner exception value was not supplied to the constructor. This property is read-only.
            </value>
        </member>
        <member name="P:System.Exception.StackTrace">
            <summary>
            Gets a string representation of the immediate frames on the call stack.
            </summary>
            <value>
            A string that describes the immediate frames of the call stack.
            </value>
        </member>
        <member name="M:System.Exception.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="T:System.FlagsAttribute">
            <summary>
            Indicates that an enumeration can be treated as a bit field; that is, a set of flags.
            </summary>
        </member>
        <member name="T:System.GC">
            <summary>
            Controls the system garbage collector, a service that automatically reclaims unused memory.
            </summary>
        </member>
        <member name="M:System.GC.WaitForPendingFinalizers">
            <summary>
            Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue.
            </summary>
        </member>
        <member name="M:System.GC.SuppressFinalize(System.Object)">
            <summary>
            Requests that the system not call the finalizer for the specified object.
            </summary>
            <param name="obj">The object that a finalizer must not be called for. </param>
        </member>
        <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
            <summary>
            Requests that the system call the finalizer for the specified object for which SuppressFinalize has previously been called.
            </summary>
            <param name="obj">The object that a finalizer must be called for. </param>
        </member>
        <member name="T:System.Globalization.CultureInfo">
            <summary>
            Provides information about a specific culture (called a locale for unmanaged code development). 
            The information includes the names for the culture, the writing system, the calendar used, the sort order of strings, and formatting for dates and numbers.
            </summary>
        </member>
        <member name="M:System.Globalization.CultureInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Globalization.CultureInfo"/> class based on the culture specified by name.
            </summary>
            <param name="name">A predefined CultureInfo name, Name of an existing CultureInfo, or Windows-only culture name. Name is not case-sensitive.</param>
        </member>
        <member name="P:System.Globalization.CultureInfo.CurrentUICulture">
            <summary>
            Gets the CultureInfo object that represents the current user interface culture used by the Resource Manager to look up culture-specific resources at run time.
            </summary>
            <value>The culture used by the Resource Manager to look up culture-specific resources at run time.</value>
        </member>
        <member name="P:System.Globalization.CultureInfo.Parent">
            <summary>
            Gets the CultureInfo that represents the parent culture of the current CultureInfo.
            </summary>
            <value>The CultureInfo that represents the parent culture of the current CultureInfo.</value>
        </member>
        <member name="P:System.Globalization.CultureInfo.Name">
            <summary>
            Gets the culture name in the format languagecode2-country/regioncode2.
            </summary>
            <value>The culture name in the format languagecode2-country/regioncode2. languagecode2 is a lowercase two-letter code derived from ISO 639-1. 
            country/regioncode2 is derived from ISO 3166 and usually consists of two uppercase letters, or a BCP-47 language tag.</value>
        </member>
        <member name="M:System.Globalization.CultureInfo.ToString">
            <summary>
            Returns a string containing the name of the current CultureInfo in the format languagecode2-country/regioncode2.
            </summary>
            <returns>A string containing the name of the current CultureInfo.</returns>
        </member>
        <member name="P:System.Globalization.CultureInfo.NumberFormat">
            <summary>
            Gets a NumberFormatInfo that defines the culturally appropriate format of displaying numbers, currency, and percentage.
            </summary>
            <value>A NumberFormatInfo that defines the culturally appropriate format of displaying numbers, currency, and percentage.</value>
        </member>
        <member name="P:System.Globalization.CultureInfo.DateTimeFormat">
            <summary>
            Gets a DateTimeFormatInfo that defines the culturally appropriate format of displaying dates and times.
            </summary>
            <value>A DateTimeFormatInfo that defines the culturally appropriate format of displaying dates and times.</value>
        </member>
        <member name="T:System.Globalization.DateTimeFormatInfo">
            <summary>
            Provides culture-specific information about the format of date and time values.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.CurrentInfo">
            <summary>
            Gets a read-only DateTimeFormatInfo object that formats values based on the current culture.
            </summary>
            <value>A read-only DateTimeFormatInfo object based on the CultureInfo object for the current thread.</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.AMDesignator">
            <summary>
            Gets the string designator for hours that are "ante meridiem" (before noon).
            </summary>
            <value>The string designator for hours that are ante meridiem. The default for InvariantInfo is "AM".</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.DateSeparator">
            <summary>
            Gets the string that separates the components of a date, that is, the year, month, and day.
            </summary>
            <value>The string that separates the components of a date, that is, the year, month, and day. The default for InvariantInfo is "/".</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern">
            <summary>
            Gets the custom format string for a long date and long time value.
            </summary>
            <value>The custom format string for a long date and long time value.</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.LongDatePattern">
            <summary>
            Gets the custom format string for a long date value.
            </summary>
            <value>The custom format string for a long date value.</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.LongTimePattern">
            <summary>
            Gets the custom format string for a long time value.
            </summary>
            <value>The format pattern for a long time value.</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern">
            <summary>
            Gets the custom format string for a month and day value.
            </summary>
            <value>The custom format string for a month and day value.</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.PMDesignator">
            <summary>
            Gets the string designator for hours that are "post meridiem" (after noon).
            </summary>
            <value>The string designator for hours that are "post meridiem" (after noon). The default for InvariantInfo is "PM".</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern">
            <summary>
            Gets the custom format string for a time value that is based on the Internet Engineering Task Force (IETF) Request for Comments (RFC) 1123 specification.
            </summary>
            <value>The custom format string for a time value that is based on the IETF RFC 1123 specification.</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern">
            <summary>
            Gets the custom format string for a short date value.
            </summary>
            <value>The custom format string for a short date value.</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern">
            <summary>
            Gets the custom format string for a short time value.
            </summary>
            <value>The custom format string for a short time value.</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern">
            <summary>
            Gets the custom format string for a sortable date and time value.
            </summary>
            <value>The custom format string for a sortable date and time value.</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.TimeSeparator">
            <summary>
            Gets the string that separates the components of time, that is, the hour, minutes, and seconds.
            </summary>
            <value>The string that separates the components of time. The default for InvariantInfo is ":".</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern">
            <summary>
            Gets the custom format string for a universal, sortable date and time string.
            </summary>
            <value>The custom format string for a universal, sortable date and time string.</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern">
            <summary>
            Gets the custom format string for a year and month value.
            </summary>
            <value>The custom format string for a year and month value.</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames">
            <summary>
            Gets a one-dimensional array of type String containing the culture-specific abbreviated names of the days of the week.
            </summary>
            <value>A one-dimensional array of type String containing the culture-specific abbreviated names of the days of the week. The array for InvariantInfo contains "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", and "Sat".</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.DayNames">
            <summary>
            Gets a one-dimensional string array that contains the culture-specific full names of the days of the week.
            </summary>
            <value>A one-dimensional string array that contains the culture-specific full names of the days of the week. The array for InvariantInfo contains "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", and "Saturday".</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames">
            <summary>
            Gets or sets a one-dimensional string array that contains the culture-specific abbreviated names of the months.
            </summary>
            <value>A one-dimensional string array with 13 elements that contains the culture-specific abbreviated names of the months. For 12-month calendars, the 13th element of the array is an empty string. 
            The array for InvariantInfo contains "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", and "".</value>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.MonthNames">
            <summary>
            Gets or sets a one-dimensional array of type String containing the culture-specific full names of the months.
            </summary>
            <value>A one-dimensional array of type String containing the culture-specific full names of the months. In a 12-month calendar, the 13th element of the array is an empty string. 
            The array for InvariantInfo contains "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", and "".</value>
        </member>
        <member name="T:System.Globalization.NumberFormatInfo">
            <summary>
            Provides culture-specific information for formatting and parsing numeric values.
            </summary>
        </member>
        <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSizes">
            <summary>
            Gets the number of digits in each group to the left of the decimal in numeric values.
            </summary>
            <value>The number of digits in each group to the left of the decimal in numeric values. The default for InvariantInfo is a one-dimensional array with only one element, which is set to 3.</value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:System.Globalization.NumberFormatInfo.CurrentInfo">
            <summary>
            Gets a read-only NumberFormatInfo that formats values based on the current culture.
            </summary>
            <value>A read-only NumberFormatInfo based on the culture of the current thread.</value>
        </member>
        <member name="P:System.Globalization.NumberFormatInfo.NegativeSign">
            <summary>
            Gets the string that denotes that the associated number is negative.
            </summary>
            <value>The string that denotes that the associated number is negative. The default for InvariantInfo is "-".</value>
        </member>
        <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator">
            <summary>
            Gets the string to use as the decimal separator in numeric values.
            </summary>
            <value>The string to use as the decimal separator in numeric values. The default for InvariantInfo is ".".</value>
        </member>
        <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator">
            <summary>
            Gets the string that separates groups of digits to the left of the decimal in numeric values.
            </summary>
            <value>The string that separates groups of digits to the left of the decimal in numeric values. The default for InvariantInfo is ",".</value>
        </member>
        <member name="P:System.Globalization.NumberFormatInfo.PositiveSign">
            <summary>
            Gets the string that denotes that the associated number is positive.
            </summary>
            <value>The string that denotes that the associated number is positive. The default for InvariantInfo is "+".</value>
        </member>
        <member name="T:System.Guid">
            <summary>
            Represents a globally unique identifier (GUID).
            </summary>
        </member>
        <member name="F:System.Guid.Empty">
            <summary>
            A read-only instance of the Guid class which consists of all zeros.
            </summary>
        </member>
        <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Guid"/> structure by using the specified integers and bytes.
            </summary>
            <param name="a">The first 4 bytes of the GUID.</param>
            <param name="b">The next 2 bytes of the GUID.</param>
            <param name="c">The next 2 bytes of the GUID.</param>
            <param name="d">The next byte of the GUID.</param>
            <param name="e">The next byte of the GUID.</param>
            <param name="f">The next byte of the GUID.</param>
            <param name="g">The next byte of the GUID.</param>
            <param name="h">The next byte of the GUID.</param>
            <param name="i">The next byte of the GUID.</param>
            <param name="j">The next byte of the GUID.</param>
            <param name="k">The next byte of the GUID.</param>
            <remarks>Specifying individual bytes in this manner can be used to circumvent byte order restrictions (big-endian or little-endian byte order) on particular types of computers.</remarks>
        </member>
        <member name="M:System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Guid"/> structure by using the specified integers and bytes.
            </summary>
            <param name="a">The first 4 bytes of the GUID.</param>
            <param name="b">The next 2 bytes of the GUID.</param>
            <param name="c">The next 2 bytes of the GUID.</param>
            <param name="d">The next byte of the GUID.</param>
            <param name="e">The next byte of the GUID.</param>
            <param name="f">The next byte of the GUID.</param>
            <param name="g">The next byte of the GUID.</param>
            <param name="h">The next byte of the GUID.</param>
            <param name="i">The next byte of the GUID.</param>
            <param name="j">The next byte of the GUID.</param>
            <param name="k">The next byte of the GUID.</param>
            <remarks>Specifying the bytes in this manner avoids endianness issues.</remarks>
        </member>
        <member name="M:System.Guid.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Guid"/> structure by using the specified array of bytes.
            </summary>
            <param name="b">A 16-element byte array containing values with which to initialize the GUID.</param>
        </member>
        <member name="M:System.Guid.#ctor(System.String)">
            <summary>
              Creates a new <see cref="T:System.Guid"/> based on the value in the string.  The value is made up
              of hex digits speared by the dash ("-"). The string may begin and end with
              brackets ("{", "}").
              
              The string must be of the form dddddddd-dddd-dddd-dddd-dddddddddddd. where
              d is a hex digit. (That is 8 hex digits, followed by 4, then 4, then 4,
              then 12) such as: "CA761232-ED42-11CE-BACD-00AA0057B223"
            </summary>
            <param name="g">String representation of new <see cref="T:System.Guid"/>.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:System.Guid.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">Guid instance to compare, or null.</param>
            <returns>Indication of the relative values (0 = equal, -1 = this instance less, +1 = this instance greater)</returns>
        </member>
        <member name="M:System.Guid.ToByteArray">
            <summary>
            Returns a 16-element byte array that contains the value of this instance.
            </summary>
            <returns>A 16-element byte array.</returns>
        </member>
        <member name="M:System.Guid.ToString">
             <summary>
             Returns a string representation of the value of this instance of the <see cref="T:System.Guid"/> structure.
             </summary>
             <returns>The value of this Guid, formatted by using the "D" format specifier as follows: 
            
             xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 
            
             where the value of the GUID is represented as a series of lowercase hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens. An example of a return value is "382c74c3-721d-4f34-80e5-57657b6cbc27". To convert the hexadecimal digits from a through f to uppercase, call the <see cref="M:System.String.ToUpper"/> method on the returned string.
             </returns>
        </member>
        <member name="M:System.Guid.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance. </param>
            <returns></returns>
        </member>
        <member name="M:System.Guid.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:System.Guid.NewGuid">
            <summary>
            Initializes a new instance of the <see cref="T:System.Guid"/> structure.
            </summary>
            <returns>A new GUID object.</returns>
        </member>
        <member name="M:System.Guid.TryParseGuidWithDashes(System.String,System.Guid@)">
            <summary>
              Creates a new <see cref="T:System.Guid"/> based on the value in the string.  The value is made up
              of hex digits speared by the dash ("-"). The string may begin and end with
              brackets ("{", "}").
              
              The string must be of the form dddddddd-dddd-dddd-dddd-dddddddddddd. where
              d is a hex digit. (That is 8 hex digits, followed by 4, then 4, then 4,
              then 12) such as: "CA761232-ED42-11CE-BACD-00AA0057B223"
            </summary>
            <param name="guidString">Guid string to parse.</param>
            <param name="result">Resulting Guid.</param>
            <returns></returns>
        </member>
        <member name="M:System.Guid.HexStringToLong(System.String,System.Int32@,System.Int32)">
            <summary>
            Converts a hex sub-string to a long, while incrementing the parsePos.
            </summary>
            <param name="str">The string containing the hex sub-string.</param>
            <param name="parsePos">The position of the hex sub-string within str.</param>
            <param name="requiredLength">The length of the hex sub-string.</param>
            <returns>False if any character is not a hex digit or string is shorter than needed for the requiredLength. Otherwise true.</returns>
        </member>
        <member name="T:System.IAsyncResult">
            <summary>
            Represents the status of an asynchronous operation.
            </summary>
        </member>
        <member name="T:System.ICloneable">
            <summary>
            Defines an interface indicating that an object may be cloned.
            </summary>
        </member>
        <member name="M:System.ICloneable.Clone">
            <summary>
            Make a new object which is a copy of the object instanced.
            </summary>
            <returns>A new object that represents a clone of the object.</returns>
        </member>
        <member name="T:System.IComparable">
            <summary>
            Defines a generalized type-specific comparison method that a value type or class implements to order or sort its instances.
            </summary>
        </member>
        <member name="M:System.IComparable.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance. </param>
            <returns>A value that indicates the relative order of the objects being compared.
            <para>Less than zero : This instance precedes obj in the sort order.</para>
            <para>Zero : This instance occurs in the same position in the sort order as obj.</para>
            <para>Greater than zero : This instance follows obj in the sort order.</para>
            </returns>
        </member>
        <member name="T:System.ICustomFormatter">
            <summary>
            Defines a method that supports custom formatting of the value of an object.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.
            </summary>
            <param name="format">A format string containing formatting specifications. </param>
            <param name="arg">An object to format. </param>
            <param name="formatProvider">An object that supplies format information about the current instance. </param>
            <returns>The string representation of the value of arg, formatted as specified by format and formatProvider.</returns>
        </member>
        <member name="T:System.IDisposable">
            <summary>
            Defines a method to release allocated resources.
            </summary>
        </member>
        <member name="M:System.IDisposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:System.IFormatProvider">
            <summary>
            Provides a mechanism for retrieving an object to control formatting.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="M:System.IFormatProvider.GetFormat(System.Type)">
            <summary>
            Returns an object that provides formatting services for the specified type.
            </summary>
            <param name="formatType">An object that specifies the type of format object to return. </param>
            <returns>An instance of the object specified by formatType, if the IFormatProvider implementation can supply that type of object; otherwise,  null reference (Nothing in Visual Basic).</returns>
        </member>
        <member name="T:System.IFormattable">
            <summary>
            Provides functionality to format the value of an object into a string representation.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The format to use -or- A null reference(Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. </param>
            <param name="formatProvider">The provider to use to format the value -or- A null reference(Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. </param>
            <returns>The value of the current instance in the specified format.</returns>
        </member>
        <member name="T:System.IndexOutOfRangeException">
            <summary>
            The exception that is thrown when an attempt is made to access an element of an array with an index that is outside the bounds of the array. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.IndexOutOfRangeException.#ctor">
            <summary>
            Initializes a new instance of the IndexOutOfRangeException class.
            </summary>
        </member>
        <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IndexOutOfRangeException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the IndexOutOfRangeException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
        </member>
        <member name="T:System.Int16">
            <summary>
            Represents a 16-bit signed integer.
            </summary>
        </member>
        <member name="F:System.Int16.MaxValue">
            <summary>
            Represents the largest possible value of an Int16. This field is constant.
            </summary>
            <remarks>The value of this constant is 32767; that is, hexadecimal 0x7FFF.</remarks>
        </member>
        <member name="F:System.Int16.MinValue">
            <summary>
            Represents the smallest possible value of Int16. This field is constant.
            </summary>
            <remarks>The value of this constant is -32768; that is, hexadecimal 0x8000.</remarks>
        </member>
        <member name="M:System.Int16.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
        </member>
        <member name="M:System.Int16.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using the specified format
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>The string representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:System.Int16.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its 16-bit signed integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert. </param>
            <returns>A 16-bit signed integer equivalent to the number contained in s.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:System.Int32">
            <summary>
            Represents a 32-bit signed integer.
            </summary>
        </member>
        <member name="F:System.Int32.MaxValue">
            <summary>
            Represents the largest possible value of an Int32. This field is constant.
            </summary>
            <remarks>The value of this constant is 2,147,483,647; that is, hexadecimal 0x7FFFFFFF.</remarks>
        </member>
        <member name="F:System.Int32.MinValue">
            <summary>
            Represents the smallest possible value of Int32. This field is constant.
            </summary>
            <remarks>The value of this constant is -2,147,483,648; that is, hexadecimal 0x80000000.</remarks>
        </member>
        <member name="M:System.Int32.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
        </member>
        <member name="M:System.Int32.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using the specified format.
            </summary>
            <param name="format">A standard or custom numeric format string</param>
            <returns>he string representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:System.Int32.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its 32-bit signed integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert. </param>
            <returns>A 32-bit signed integer equivalent to the number contained in s.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:System.Int64">
            <summary>
            Represents a 64-bit signed integer.
            </summary>
        </member>
        <member name="F:System.Int64.MaxValue">
            <summary>
            Represents the largest possible value of an Int64. This field is constant.
            </summary>
            <remarks>The value of this constant is 9,223,372,036,854,775,807; that is, hexadecimal 0x7FFFFFFFFFFFFFFF.</remarks>
        </member>
        <member name="F:System.Int64.MinValue">
            <summary>
            Represents the smallest possible value of an Int64. This field is constant.
            </summary>
            <remarks>The value of this constant is negative 9,223,372,036,854,775,808; that is, hexadecimal 0x8000000000000000.</remarks>
        </member>
        <member name="M:System.Int64.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
        </member>
        <member name="M:System.Int64.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using the specified format.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>The string representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:System.Int64.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its 64-bit signed integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert. </param>
            <returns>A 64-bit signed integer equivalent to the number contained in s.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:System.IntPtr">
            <summary>
             A platform-specific type that is used to represent a pointer or a handle.
            </summary>
        </member>
        <member name="T:System.InvalidCastException">
            <summary>
            The exception that is thrown for invalid casting or explicit conversion.
            </summary>
        </member>
        <member name="M:System.InvalidCastException.#ctor">
            <summary>
            Initializes a new instance of the InvalidCastException class.
            </summary>
        </member>
        <member name="M:System.InvalidCastException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidCastException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidCastException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
        </member>
        <member name="T:System.InvalidOperationException">
            <summary>
            The exception that is thrown when a method call is invalid for the object's current state.
            </summary>
        </member>
        <member name="M:System.InvalidOperationException.#ctor">
            <summary>
            Initializes a new instance of the InvalidOperationException class.
            </summary>
        </member>
        <member name="M:System.InvalidOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidOperationException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidOperationException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
        </member>
        <member name="T:System.IO.IOException">
            <summary>
            The exception that is thrown when an I/O error occurs.
            </summary>
        </member>
        <member name="T:System.IO.IOException.IOExceptionErrorCode">
            <summary>
            Provides values for error codes.
            </summary>
        </member>
        <member name="F:System.IO.IOException.IOExceptionErrorCode.Others">
            <summary>
            Others
            </summary>
        </member>
        <member name="F:System.IO.IOException.IOExceptionErrorCode.InvalidDriver">
            <summary>
            Invalid driver
            </summary>
        </member>
        <member name="F:System.IO.IOException.IOExceptionErrorCode.FileNotFound">
            <summary>
            File not found
            </summary>
        </member>
        <member name="F:System.IO.IOException.IOExceptionErrorCode.DirectoryNotFound">
            <summary>
            Directory not found
            </summary>
        </member>
        <member name="F:System.IO.IOException.IOExceptionErrorCode.VolumeNotFound">
            <summary>
            Volume not found
            </summary>
        </member>
        <member name="F:System.IO.IOException.IOExceptionErrorCode.PathTooLong">
            <summary>
            Path too long
            </summary>
        </member>
        <member name="F:System.IO.IOException.IOExceptionErrorCode.DirectoryNotEmpty">
            <summary>
            Directory not empty
            </summary>
        </member>
        <member name="F:System.IO.IOException.IOExceptionErrorCode.UnauthorizedAccess">
            <summary>
            Unauthorized access
            </summary>
        </member>
        <member name="F:System.IO.IOException.IOExceptionErrorCode.PathAlreadyExists">
            <summary>
            Path already exists
            </summary>
        </member>
        <member name="F:System.IO.IOException.IOExceptionErrorCode.TooManyOpenHandles">
            <summary>
            Too many open handles
            </summary>
        </member>
        <member name="M:System.IO.IOException.#ctor">
            <summary>
            Initializes a new instance of the IOException class with its message string set to the empty string (""), its HRESULT set to COR_E_IO, and its inner exception set to a null reference.
            </summary>
        </member>
        <member name="M:System.IO.IOException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IOException class with its message string set to message, its HRESULT set to COR_E_IO, and its inner exception set to  null reference (Nothing in Visual Basic).
            </summary>
            <param name="message">A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
        </member>
        <member name="M:System.IO.IOException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the IOException class with its message string set to message and its HRESULT user-defined.
            </summary>
            <param name="message">A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
            <param name="hresult">An integer identifying the error that has occurred. </param>
        </member>
        <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the IOException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not  null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
        </member>
        <member name="P:System.IO.IOException.ErrorCode">
            <summary>
            The error code associated with this IOException object.
            </summary>
            <value>
            The error code.
            </value>
        </member>
        <member name="T:System.IO.SeekOrigin">
            <summary>
            Specifies the position in a stream to use for seeking.
            </summary>
            <remarks>These constants match Win32's FILE_BEGIN, FILE_CURRENT, and FILE_END</remarks>
        </member>
        <member name="F:System.IO.SeekOrigin.Begin">
            <summary>
            Specifies the beginning of a stream.
            </summary>
        </member>
        <member name="F:System.IO.SeekOrigin.Current">
            <summary>
            Specifies the current position within a stream.
            </summary>
        </member>
        <member name="F:System.IO.SeekOrigin.End">
            <summary>
            Specifies the end of a stream.
            </summary>
        </member>
        <member name="T:System.IO.Stream">
            <summary>
            Provides a generic view of a sequence of bytes. This is an abstract class.
            </summary>
        </member>
        <member name="P:System.IO.Stream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <value>
            true if the stream supports reading; otherwise, false.
            </value>
        </member>
        <member name="P:System.IO.Stream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <value>
            true if the stream supports seeking; otherwise, false.
            </value>
        </member>
        <member name="P:System.IO.Stream.CanTimeout">
            <summary>
            Gets a value that determines whether the current stream can time out.
            </summary>
            <value>
            A value that determines whether the current stream can time out.
            </value>
        </member>
        <member name="P:System.IO.Stream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <value>
            true if the stream supports writing; otherwise, false.
            </value>
        </member>
        <member name="P:System.IO.Stream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <value>
            A long value representing the length of the stream in bytes.
            </value>
        </member>
        <member name="P:System.IO.Stream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <value>
            The current position within the stream.
            </value>
        </member>
        <member name="P:System.IO.Stream.ReadTimeout">
            <summary>
            Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out.
            </summary>
            <value>
            A value, in milliseconds, that determines how long the stream will attempt to read before timing out.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:System.IO.Stream.WriteTimeout">
            <summary>
            Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out.
            </summary>
            <value>
            A value, in milliseconds, that determines how long the stream will attempt to write before timing out.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.IO.Stream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. 
            Instead of calling this method, ensure that the stream is properly disposed.
            </summary>
            <remarks>
            Stream used to require that all cleanup logic went into Close(),
            which was thought up before we invented IDisposable.  However, we
            need to follow the IDisposable pattern so that users can write
            sensible subclasses without needing to inspect all their base
            classes, and without worrying about version brittleness, from a
            base class switching to the Dispose pattern.  We're moving
            Stream to the Dispose(bool) pattern - that's where all subclasses
            should put their cleanup starting in V2.
            </remarks>
        </member>
        <member name="M:System.IO.Stream.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:System.IO.Stream.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.IO.Stream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Stream and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:System.IO.Stream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:System.IO.Stream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:System.IO.Stream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:System.IO.Stream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream.</param>
        </member>
        <member name="T:System.MarshalByRefObject">
            <summary>
            Enables access to objects across application domain boundaries in applications that support remoting.
            </summary>
        </member>
        <member name="T:System.MulticastDelegate">
            <summary>
            Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list.
            </summary>
        </member>
        <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
            <summary>
            Determines whether two MulticastDelegate objects are equal.
            </summary>
            <param name="d1">The left operand.</param>
            <param name="d2">The right operand.</param>
            <returns>true if d1 and d2 have the same invocation lists; otherwise, false.</returns>
        </member>
        <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
            <summary>
            Determines whether two MulticastDelegate objects are not equal.
            </summary>
            <param name="d1">The left operand.</param>
            <param name="d2">The right operand.</param>
            <returns>rue if d1 and d2 do not have the same invocation lists; otherwise, false.</returns>
        </member>
        <member name="M:System.MulticastDelegate.Equals(System.Object)">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <param name="obj">A 32-bit signed integer hash code.</param>
            <returns></returns>
        </member>
        <member name="T:System.NonSerializedAttribute">
            <summary>
            Indicates that a field of a serializable class should not be serialized. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.NonSerializedAttribute.#ctor">
            <summary>
            Initializes a new instance of the NonSerializedAttribute class.
            </summary>
        </member>
        <member name="T:System.NotImplementedException">
            <summary>
            The exception that is thrown when a requested method or operation is not implemented.
            </summary>
        </member>
        <member name="M:System.NotImplementedException.#ctor">
            <summary>
            Initializes a new instance of the NotImplementedException class with default properties.
            </summary>
        </member>
        <member name="M:System.NotImplementedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NotImplementedException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the NotImplementedException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:System.NotSupportedException">
            <summary>
            The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.
            </summary>
        </member>
        <member name="M:System.NotSupportedException.#ctor">
            <summary>
            Initializes a new instance of the NotSupportedException class, setting the Message property of the new instance to a system-supplied message that describes the error. This message takes into account the current system culture.
            </summary>
        </member>
        <member name="M:System.NotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NotSupportedException class with a specified error message.
            </summary>
            <param name="message">A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
        </member>
        <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the NotSupportedException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:System.NullReferenceException">
            <summary>
            The exception that is thrown when there is an attempt to dereference a null object reference.
            </summary>
        </member>
        <member name="M:System.NullReferenceException.#ctor">
            <summary>
            Initializes a new instance of the NullReferenceException class, setting the Message property of the new instance to a system-supplied message that describes the error, such as "The value 'null' was found where an instance of an object was required." This message takes into account the current system culture.
            </summary>
        </member>
        <member name="M:System.NullReferenceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NullReferenceException class with a specified error message.
            </summary>
            <param name="message">A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
        </member>
        <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the NullReferenceException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:System.Object">
            <summary>
            Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.
            </summary>
        </member>
        <member name="M:System.Object.#ctor">
            <summary>
            Initializes a new instance of the Object class.
            </summary>
        </member>
        <member name="M:System.Object.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="M:System.Object.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">he object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:System.Object.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns>true if the objects are considered equal; otherwise, false. If both objA and objB are null, the method returns true.</returns>
        </member>
        <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
            <summary>
            Determines whether the specified Object instances are the same instance.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns>true if objA is the same instance as objB or if both are null; otherwise, false.</returns>
        </member>
        <member name="M:System.Object.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:System.Object.GetType">
            <summary>
            Gets the Type of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="M:System.Object.MemberwiseClone">
            <summary>
            Creates a shallow copy of the current Object.
            </summary>
            <returns>A shallow copy of the current Object.</returns>
        </member>
        <member name="T:System.ObjectDisposedException">
            <summary>
            The exception that is thrown when an operation is performed on a disposed object.
            </summary>
        </member>
        <member name="M:System.ObjectDisposedException.#ctor">
            <summary>
            Initializes a new instance of the ObjectDisposedException class.
            </summary>
        </member>
        <member name="M:System.ObjectDisposedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ObjectDisposedException class with a string containing the name of the disposed object.
            </summary>
            <param name="message">A string containing the name of the disposed object.</param>
        </member>
        <member name="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ObjectDisposedException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If innerException is not  null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:System.ObsoleteAttribute">
            <summary>
            Marks the program elements that are no longer in use. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.ObsoleteAttribute.#ctor">
            <summary>
            Initializes a new instance of the ObsoleteAttribute class with default properties.
            </summary>
        </member>
        <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ObsoleteAttribute class with a specified workaround message.
            </summary>
            <param name="message">The text string that describes alternative workarounds.</param>
        </member>
        <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the ObsoleteAttribute class with a workaround message and a Boolean value indicating whether the obsolete element usage is considered an error.
            </summary>
            <param name="message">The text string that describes alternative workarounds.</param>
            <param name="error">true if the obsolete element usage generates a compiler error; false if it generates a compiler warning.</param>
        </member>
        <member name="P:System.ObsoleteAttribute.Message">
            <summary>
            Gets the workaround message, including a description of the alternative program elements.
            </summary>
            <value>
            The workaround text string.
            </value>
        </member>
        <member name="P:System.ObsoleteAttribute.IsError">
            <summary>
            Gets a Boolean value indicating whether the compiler will treat usage of the obsolete program element as an error.
            </summary>
            <value>true if the obsolete element usage is considered an error; otherwise, false. The default is false.</value>
        </member>
        <member name="T:System.OutOfMemoryException">
            <summary>
            The exception that is thrown when there is not enough memory to continue the execution of a program.
            </summary>
        </member>
        <member name="M:System.OutOfMemoryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.OutOfMemoryException"/> class.
            </summary>
        </member>
        <member name="M:System.OutOfMemoryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OutOfMemoryException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the OutOfMemoryException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:System.ParamArrayAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.ParamArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the ParamArrayAttribute class with default properties.
            </summary>
        </member>
        <member name="T:System.Random">
            <summary>
            Represents a random number generator, a device that produces a
            sequence of numbers that meet certain statistical requirements for
            randomness.
            </summary>
            <remarks>
            Depending on the platform it can be a software dependent pseudo-random generator algorithm 
            or a hardware random generator providing true random numbers.
            </remarks>
        </member>
        <member name="M:System.Random.#ctor">
            <summary>
            Initializes a new instance of the Random class. 
            If the provider is algorithm based the initialisation is performed using a time-
            dependent default seed value.
            </summary>
        </member>
        <member name="M:System.Random.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Random class, using the specified
            seed value.
            </summary>
            <param name="seed">A number used to calculate a starting value for
            the pseudo-random number sequence.</param>
        </member>
        <member name="M:System.Random.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>A 32-bit signed integer greater than or equal to zero and
            less than MaxValue.</returns>
        </member>
        <member name="M:System.Random.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number
            to be generated. maxValue must be greater than or equal to zero.</param>
            <returns>A 32-bit signed integer greater than or equal to zero, and
            less than maxValue.</returns>
        </member>
        <member name="M:System.Random.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal
            to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:System.Random.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
        </member>
        <member name="T:System.Reflection.AssemblyName">
            <summary>
            Describes an assembly's unique identity in full.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="P:System.Reflection.AssemblyName.Name">
            <summary>
            Gets the simple name of the assembly. This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.
            </summary>
            <value>The simple name of the assembly.</value>
        </member>
        <member name="P:System.Reflection.AssemblyName.FullName">
            <summary>
            Gets the full name of the assembly, also known as the display name.
            </summary>
            <value>A string that is the full name of the assembly, also known as the display name.</value>
        </member>
        <member name="P:System.Reflection.AssemblyName.Version">
            <summary>
            Gets or sets the major, minor, build, and revision numbers of the assembly.
            </summary>
            <value>An object that represents the major, minor, build, and revision numbers of the assembly.</value>
        </member>
        <member name="T:System.Reflection.Assembly">
            <summary>
            Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.
            </summary>
        </member>
        <member name="P:System.Reflection.Assembly.FullName">
            <summary>
            Gets the display name of the assembly.
            </summary>
            <value>The display name of the assembly.</value>
        </member>
        <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
            <summary>
            Gets the assembly that contains the code that is currently executing.
            </summary>
            <returns>The assembly that contains the code that is currently executing.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetName">
            <summary>
            Gets an AssemblyName for this assembly.
            </summary>
            <returns>An object that contains the fully parsed display name for this assembly.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetAssembly(System.Type)">
            <summary>
            Gets the currently loaded assembly in which the specified type is defined.
            </summary>
            <param name="type">An object representing a type in the assembly that will be returned.</param>
            <returns>The assembly in which the specified type is defined.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetType(System.String)">
            <summary>
            Gets the Type object with the specified name in the assembly instance.
            </summary>
            <param name="name">The full name of the type.</param>
            <returns>An object that represents the specified class, or null if the class is not found.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)">
            <summary>
            Gets the Type object with the specified name in the assembly instance and optionally throws an exception if the type is not found.
            </summary>
            <param name="name">The full name of the type.</param>
            <param name="throwOnError">true to throw an exception if the type is not found; false to return null.</param>
            <returns>An object that represents the specified class.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:System.Reflection.Assembly.GetTypes">
            <summary>
            Gets the types defined in this assembly.
            </summary>
            <returns>An array that contains all the types that are defined in this assembly.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)">
            <summary>
            Gets the satellite assembly for the specified culture.
            </summary>
            <param name="culture">The specified culture.</param>
            <returns>The specified satellite assembly.</returns>
            <exception cref="T:System.ArgumentNullException">culture is null.</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:System.Reflection.Assembly.Load(System.String)">
            <summary>
            Loads an assembly given the long form of its name.
            </summary>
            <param name="assemblyString">The long form of the assembly name.</param>
            <returns>The loaded assembly.</returns>
            <exception cref="T:System.ArgumentNullException">assemblyString is null.</exception>
        </member>
        <member name="M:System.Reflection.Assembly.Load(System.Byte[])">
            <summary>
            Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the application domain of the caller.
            </summary>
            <param name="rawAssembly">A byte array that is a COFF-based image containing an emitted assembly.</param>
            <returns>The loaded assembly.</returns>
        </member>
        <member name="T:System.Reflection.AssemblyCultureAttribute">
            <summary>
            Specifies which culture the assembly supports.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyCultureAttribute class with the culture supported by the assembly being attributed.
            </summary>
            <param name="culture">The culture supported by the attributed assembly.</param>
        </member>
        <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
            <summary>
            Gets the supported culture of the attributed assembly.
            </summary>
            <value>
            A string containing the name of the supported culture.
            </value>
        </member>
        <member name="T:System.Reflection.AssemblyVersionAttribute">
            <summary>
            Specifies the version of the assembly being attributed.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyVersionAttribute class with the version number of the assembly being attributed.
            </summary>
            <param name="version">The version number of the attributed assembly.</param>
        </member>
        <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
            <summary>
            Gets the version number of the attributed assembly.
            </summary>
            <value>
            A string containing the assembly version number.
            </value>
        </member>
        <member name="T:System.Reflection.AssemblyKeyFileAttribute">
            <summary>
            Specifies the name of a file containing the key pair used to generate a strong name.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyKeyFileAttribute class with the name of the file containing the key pair to generate a strong name for the assembly being attributed.
            </summary>
            <param name="keyFile">The name of the file containing the key pair.</param>
        </member>
        <member name="P:System.Reflection.AssemblyKeyFileAttribute.KeyFile">
            <summary>
            Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.
            </summary>
            <value>
            A string containing the name of the file that contains the key pair.
            </value>
        </member>
        <member name="T:System.Reflection.AssemblyKeyNameAttribute">
            <summary>
            Specifies the name of a key container within the CSP containing the key pair used to generate a strong name.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyKeyNameAttribute class with the name of the container holding the key pair used to generate a strong name for the assembly being attributed.
            </summary>
            <param name="keyName">The name of the container containing the key pair.</param>
        </member>
        <member name="P:System.Reflection.AssemblyKeyNameAttribute.KeyName">
            <summary>
            Gets the name of the container having the key pair that is used to generate a strong name for the attributed assembly.
            </summary>
            <value>
            A string containing the name of the container that has the relevant key pair.
            </value>
        </member>
        <member name="T:System.Reflection.AssemblyDelaySignAttribute">
            <summary>
            Specifies that the assembly is not fully signed when created.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AssemblyDelaySignAttribute class.
            </summary>
            <param name="delaySign">true if the feature this attribute represents is activated; otherwise, false.</param>
        </member>
        <member name="P:System.Reflection.AssemblyDelaySignAttribute.DelaySign">
            <summary>
            Gets a value indicating the state of the attribute.
            </summary>
            <value>
            true if this assembly has been built as delay-signed; otherwise, false.
            </value>
        </member>
        <member name="T:System.Reflection.AssemblyFlagsAttribute">
            <summary>
            Specifies a bitwise combination of AssemblyNameFlags flags for an assembly, describing just-in-time (JIT) compiler options,
            whether the assembly is retargetable, and whether it has a full or tokenized public key. This class cannot be inherited.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.UInt32)">
            <summary>
            Note: This API is now obsolete.
            Initializes a new instance of the AssemblyFlagsAttribute class with the specified combination of AssemblyNameFlags flags, cast as an unsigned integer value.
            </summary>
            <param name="flags">A bitwise combination of AssemblyNameFlags flags, cast as an unsigned integer value, representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</param>
        </member>
        <member name="P:System.Reflection.AssemblyFlagsAttribute.Flags">
            <summary>
            Note: This API is now obsolete.
            Gets an unsigned integer value representing the combination of AssemblyNameFlags flags specified when this attribute instance was created.
            </summary>
            <value>
            An unsigned integer value representing a bitwise combination of AssemblyNameFlags flags.
            </value>
        </member>
        <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)">
            <summary>
            Initializes a new instance of the AssemblyFlagsAttribute class with the specified combination of AssemblyNameFlags flags.
            </summary>
            <param name="assemblyFlags">A bitwise combination of AssemblyNameFlags flags representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</param>
        </member>
        <member name="T:System.Reflection.AssemblyFileVersionAttribute">
            <summary>
            Instructs a compiler to use a specific version number for the Win32 file version resource. The Win32 file version is not required to be the same as the assembly's version number.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyFileVersionAttribute class, specifying the file version.
            </summary>
            <param name="version">The file version.</param>
            <exception cref="T:System.ArgumentNullException">version is null</exception>
        </member>
        <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
            <summary>
            Gets the Win32 file version resource name.
            </summary>
            <value>
            A string containing the file version resource name.
            </value>
        </member>
        <member name="T:System.Reflection.AssemblyNativeVersionAttribute">
            <summary>
            Defines the required native version required for an assembly.
            At deploy time this is used to check if the target device has the correct native version to support this assembly.
            </summary>
            <remarks>
            This attribute is specific of nanoFramework.
            </remarks>
        </member>
        <member name="M:System.Reflection.AssemblyNativeVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyNativeVersionAttribute class.
            </summary>
            <param name="version">The native version required for the assembly.</param>
        </member>
        <member name="P:System.Reflection.AssemblyNativeVersionAttribute.NativeVersion">
            <summary>
            Gets the native version required for the assembly.
            </summary>
            <value>
            A string containing the native version.
            </value>
        </member>
        <member name="T:System.Reflection.AssemblyNameFlags">
            <summary>
            Provides information about an Assembly reference.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="F:System.Reflection.AssemblyNameFlags.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:System.Reflection.AssemblyNameFlags.PublicKey">
            <summary>
            Specifies that a public key is formed from the full public key rather than the public key token.
            </summary>
        </member>
        <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileOptimizer">
            <summary>
            Specifies that just-in-time (JIT) compiler optimization is disabled for the assembly. This is the exact opposite of the meaning that is suggested by the member name.
            </summary>
        </member>
        <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileTracking">
            <summary>
            Specifies that just-in-time (JIT) compiler tracking is enabled for the assembly.
            </summary>
        </member>
        <member name="F:System.Reflection.AssemblyNameFlags.Retargetable">
            <summary>
            Specifies that the assembly can be retargeted at runtime to an assembly from a different publisher. This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:System.Reflection.ProcessorArchitecture">
            <summary>
            Identifies the processor and bits-per-word of the platform targeted by an executable.
            </summary>
        </member>
        <member name="F:System.Reflection.ProcessorArchitecture.None">
            <summary>
            An unknown or unspecified combination of processor and bits-per-word.
            </summary>
        </member>
        <member name="F:System.Reflection.ProcessorArchitecture.MSIL">
            <summary>
            Neutral with respect to processor and bits-per-word.
            </summary>
        </member>
        <member name="F:System.Reflection.ProcessorArchitecture.X86">
            <summary>
            A 32-bit Intel processor, either native or in the Windows on Windows environment on a 64-bit platform (WOW64).
            </summary>
        </member>
        <member name="F:System.Reflection.ProcessorArchitecture.IA64">
            <summary>
            A 64-bit Intel processor only.
            </summary>
        </member>
        <member name="F:System.Reflection.ProcessorArchitecture.Amd64">
            <summary>
            A 64-bit AMD processor only.
            </summary>
        </member>
        <member name="T:System.Reflection.AssemblyCopyrightAttribute">
            <summary>
            Defines a copyright custom attribute for an assembly manifest.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyCopyrightAttribute class.
            </summary>
            <param name="copyright">The copyright information.</param>
        </member>
        <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
            <summary>
            Gets copyright information.
            </summary>
            <value>
            A string containing the copyright information.
            </value>
        </member>
        <member name="T:System.Reflection.AssemblyTrademarkAttribute">
            <summary>
            Defines a trademark custom attribute for an assembly manifest.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyTrademarkAttribute class.
            </summary>
            <param name="trademark">The trademark information.</param>
        </member>
        <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
            <summary>
            Gets trademark information.
            </summary>
            <value>
            A String containing trademark information.
            </value>
        </member>
        <member name="T:System.Reflection.AssemblyProductAttribute">
            <summary>
            Defines a product name custom attribute for an assembly manifest.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyProductAttribute class.
            </summary>
            <param name="product">The product name information.</param>
        </member>
        <member name="P:System.Reflection.AssemblyProductAttribute.Product">
            <summary>
            Gets product name information.
            </summary>
            <value>
            A string containing the product name.
            </value>
        </member>
        <member name="T:System.Reflection.AssemblyCompanyAttribute">
            <summary>
            Defines a company name custom attribute for an assembly manifest.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyCompanyAttribute class.
            </summary>
            <param name="company">The company name information.</param>
        </member>
        <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
            <summary>
            Gets company name information.
            </summary>
            <value>
            A string containing the company name.
            </value>
        </member>
        <member name="T:System.Reflection.AssemblyDescriptionAttribute">
            <summary>
            Provides a text description for an assembly.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyDescriptionAttribute class.
            </summary>
            <param name="description">The assembly description.</param>
        </member>
        <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
            <summary>
            Gets assembly description information.
            </summary>
            <value>
            A string containing the assembly description.
            </value>
        </member>
        <member name="T:System.Reflection.AssemblyTitleAttribute">
            <summary>
            Specifies a description for an assembly.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyTitleAttribute class.
            </summary>
            <param name="title">The assembly title.</param>
        </member>
        <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
            <summary>
            Gets assembly title information.
            </summary>
            <value>
            The assembly title.
            </value>
        </member>
        <member name="T:System.Reflection.AssemblyConfigurationAttribute">
            <summary>
            Specifies the build configuration, such as retail or debug, for an assembly.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyConfigurationAttribute class.
            </summary>
            <param name="configuration">The assembly configuration.</param>
        </member>
        <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
            <summary>
            Gets assembly configuration information.
            </summary>
            <value>
            A string containing the assembly configuration information.
            </value>
        </member>
        <member name="T:System.Reflection.AssemblyDefaultAliasAttribute">
            <summary>
            Defines a friendly default alias for an assembly manifest.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyDefaultAliasAttribute class.
            </summary>
            <param name="defaultAlias">The assembly default alias information.</param>
        </member>
        <member name="P:System.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
            <summary>
            Gets default alias information.
            </summary>
            <value>
            A string containing the default alias information.
            </value>
        </member>
        <member name="T:System.Reflection.AssemblyInformationalVersionAttribute">
            <summary>
            Defines additional version information for an assembly manifest.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyInformationalVersionAttribute class.
            </summary>
            <param name="informationalVersion">The assembly version information.</param>
        </member>
        <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
            <summary>
            Gets version information.
            </summary>
            <value>
            A string containing the version information.
            </value>
        </member>
        <member name="T:System.Reflection.Binder">
            <summary>
            Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="T:System.Reflection.BindingFlags">
            <summary>
            Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="F:System.Reflection.BindingFlags.Default">
            <summary>
            Specifies that no binding flags are defined.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.IgnoreCase">
            <summary>
            Specifies that the case of the member name should not be considered when binding.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.DeclaredOnly">
            <summary>
            Specifies that only members declared at the level of the supplied type's hierarchy should be considered. Inherited members are not considered.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.Instance">
            <summary>
            Specifies that instance members are to be included in the search.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.Static">
            <summary>
            Specifies that static members are to be included in the search.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.Public">
            <summary>
            Specifies that public members are to be included in the search.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.NonPublic">
            <summary>
            Specifies that non-public members are to be included in the search.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.FlattenHierarchy">
            <summary>
            Specifies that public and protected static members up the hierarchy should be returned. 
            Private static members in inherited classes are not returned. Static members include fields, methods, events, and properties. Nested types are not returned.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.InvokeMethod">
            <summary>
            Specifies that a method is to be invoked. This must not be a constructor or a type initializer.
            This flag is passed to an InvokeMember method to invoke a method.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.CreateInstance">
            <summary>
            Specifies that reflection should create an instance of the specified type. Calls the constructor that matches the given arguments. The supplied member name is ignored.
            If the type of lookup is not specified, (Instance | Public) will apply. It is not possible to call a type initializer.
            This flag is passed to an InvokeMember method to invoke a constructor.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.GetField">
            <summary>
            Specifies that the value of the specified field should be returned.
            This flag is passed to an InvokeMember method to get a field value.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.SetField">
            <summary>
            Specifies that the value of the specified field should be set.
            This flag is passed to an InvokeMember method to set a field value.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.GetProperty">
            <summary>
            Specifies that the value of the specified property should be returned.
            This flag is passed to an InvokeMember method to invoke a property getter.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.SetProperty">
            <summary>
            Specifies that the value of the specified property should be set. For COM properties, specifying this binding flag is equivalent to specifying PutDispProperty and PutRefDispProperty.
            This flag is passed to an InvokeMember method to invoke a property setter.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.PutDispProperty">
            <summary>
            Specifies that the PROPPUT member on a COM object should be invoked. PROPPUT specifies a property-setting function that uses a value.
            Use PutDispProperty if a property has both PROPPUT and PROPPUTREF and you need to distinguish which one is called.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.PutRefDispProperty">
            <summary>
            Specifies that the PROPPUTREF member on a COM object should be invoked. PROPPUTREF specifies a property-setting function that uses a reference instead of a value.
            Use PutRefDispProperty if a property has both PROPPUT and PROPPUTREF and you need to distinguish which one is called.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.ExactBinding">
            <summary>
            Specifies that types of the supplied arguments must exactly match the types of the corresponding formal parameters. Reflection throws an exception 
            if the caller supplies a non-null Binder object, since that implies that the caller is supplying BindToXXX implementations that will pick the appropriate method.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.SuppressChangeType">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.OptionalParamBinding">
            <summary>
            Returns the set of members whose parameter count matches the number of supplied arguments. This binding flag is used for methods with parameters that have default values and methods with variable arguments (varargs).
            This flag should only be used with Type.InvokeMember.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.IgnoreReturn">
            <summary>
            Used in COM interop to specify that the return value of the member can be ignored.
            </summary>
        </member>
        <member name="T:System.Reflection.ConstructorInfo">
            <summary>
            Discovers the attributes of a class constructor and provides access to constructor metadata.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="P:System.Reflection.ConstructorInfo.MemberType">
            <summary>
            Gets a MemberTypes value indicating that this member is a constructor.
            </summary>
            <value>
            A MemberTypes value indicating that this member is a constructor.
            </value>
        </member>
        <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])">
            <summary>
            Invokes the constructor reflected by the instance that has the specified parameters, providing default values for the parameters not commonly used.
            </summary>
            <param name="parameters">An array of values that matches the number, order and type (under the constraints of the default binder) of the parameters for this constructor.
            If this constructor takes no parameters, then use either an array with zero elements or null, as in Object[] parameters = new Object[0]. 
            Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null.
            For value-type elements, this value is 0, 0.0, or false, depending on the specific element type.</param>
            <returns>An instance of the class associated with the constructor.</returns>
        </member>
        <member name="M:System.Reflection.ConstructorInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            When overridden in a derived class, returns an array of all custom attributes applied to this member.
            </summary>
            <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
            <remarks>This method is not implemented in nanoFramework.</remarks>
            <exception cref="T:System.NotImplementedException"/>
        </member>
        <member name="T:System.Reflection.DefaultMemberAttribute">
            <summary>
            Defines the member of a type that is the default member used by InvokeMember.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DefaultMemberAttribute class.
            </summary>
            <param name="memberName">A String containing the name of the member to invoke. This may be a constructor, method, property, or field. 
            A suitable invocation attribute must be specified when the member is invoked. The default member of a class can be specified by passing an empty String as the name of the member.</param>
        </member>
        <member name="P:System.Reflection.DefaultMemberAttribute.MemberName">
            <summary>
            Gets the name from the attribute.
            </summary>
            <value>
            A string representing the member name.
            </value>
        </member>
        <member name="T:System.Reflection.FieldInfo">
            <summary>
            Discovers the attributes of a field and provides access to field metadata.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="P:System.Reflection.FieldInfo.MemberType">
            <summary>
            Gets a MemberTypes value indicating that this member is a field.
            </summary>
            <value>
            A MemberTypes value indicating that this member is a field.
            </value>
        </member>
        <member name="P:System.Reflection.FieldInfo.FieldType">
            <summary>
            Gets the type of this field object.
            </summary>
            <value>
            The type of this field object.
            </value>
        </member>
        <member name="M:System.Reflection.FieldInfo.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns the value of a field supported by a given object.
            </summary>
            <param name="obj">The object whose field value will be returned.</param>
            <returns>An object containing the value of the field reflected by this instance.</returns>
        </member>
        <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the field supported by the given object.
            </summary>
            <param name="obj">The object whose field value will be set.</param>
            <param name="value">The value to assign to the field.</param>
        </member>
        <member name="M:System.Reflection.FieldInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            When overridden in a derived class, returns an array of all custom attributes applied to this member.
            </summary>
            <param name="inherit"><c>true</c> to search this member's inheritance chain to find the attributes; otherwise, <c>false</c>. This parameter is ignored for properties and events.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
            <remarks>This method ignores the inherit parameter for properties and events.</remarks>
        </member>
        <member name="T:System.Reflection.IReflect">
            <summary>
            Interoperates with the IDispatch interface.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)">
            <summary>
            Retrieves a MethodInfo object that corresponds to a specified method under specified search constraints.
            </summary>
            <param name="name">The name of the member to find.</param>
            <param name="bindingAttr">The binding attributes used to control the search.</param>
            <returns>A MethodInfo object containing the method information, with the match being based on the method name and search constraints specified in bindingAttr.</returns>
        </member>
        <member name="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)">
            <summary>
            Returns the FieldInfo object that corresponds to the specified field and binding flag.
            </summary>
            <param name="name">The name of the field to find.</param>
            <param name="bindingAttr">The binding attributes used to control the search.</param>
            <returns>A FieldInfo object containing the field information for the named object that meets the search constraints specified in bindingAttr.</returns>
        </member>
        <member name="T:System.Reflection.MemberInfo">
            <summary>
            Obtains information about the attributes of a member and provides access to member metadata.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="P:System.Reflection.MemberInfo.MemberType">
            <summary>
            When overridden in a derived class, gets a MemberTypes value indicating the type of the member � method, constructor, event, and so on.
            </summary>
            <value>
            A MemberTypes value indicating the type of member.
            </value>
        </member>
        <member name="P:System.Reflection.MemberInfo.Name">
            <summary>
            Gets the name of the current member.
            </summary>
            <value>
            A String containing the name of this member.
            </value>
        </member>
        <member name="P:System.Reflection.MemberInfo.DeclaringType">
            <summary>
            Gets the class that declares this member.
            </summary>
            <value>
            The Type object for the class that declares this member.
            </value>
        </member>
        <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            When overridden in a derived class, returns an array of all custom attributes applied to this member.
            </summary>
            <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="T:System.Reflection.MemberTypes">
            <summary>
            Marks each type of member that is defined as a derived class of MemberInfo.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="F:System.Reflection.MemberTypes.Constructor">
            <summary>
            Specifies that the member is a constructor
            </summary>
        </member>
        <member name="F:System.Reflection.MemberTypes.Event">
            <summary>
            Specifies that the member is an event
            </summary>
        </member>
        <member name="F:System.Reflection.MemberTypes.Field">
            <summary>
            Specifies that the member is a field
            </summary>
        </member>
        <member name="F:System.Reflection.MemberTypes.Method">
            <summary>
            Specifies that the member is a method
            </summary>
        </member>
        <member name="F:System.Reflection.MemberTypes.Property">
            <summary>
            Specifies that the member is a property
            </summary>
        </member>
        <member name="F:System.Reflection.MemberTypes.TypeInfo">
            <summary>
            Specifies that the member is a type
            </summary>
        </member>
        <member name="F:System.Reflection.MemberTypes.Custom">
            <summary>
            Specifies that the member is a custom member type
            </summary>
        </member>
        <member name="F:System.Reflection.MemberTypes.NestedType">
            <summary>
            Specifies that the member is a nested type
            </summary>
        </member>
        <member name="F:System.Reflection.MemberTypes.All">
            <summary>
            Specifies all member types.
            </summary>
        </member>
        <member name="T:System.Reflection.MethodBase">
            <summary>
            Provides information about methods and constructors.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="P:System.Reflection.MethodBase.IsPublic">
            <summary>
            Gets a value indicating whether this is a public method.
            </summary>
            <value>
            true if this method is public; otherwise, false.
            </value>
        </member>
        <member name="P:System.Reflection.MethodBase.IsStatic">
            <summary>
            Gets a value indicating whether the method is static.
            </summary>
            <value>
            true if this method is static; otherwise, false.
            </value>
        </member>
        <member name="P:System.Reflection.MethodBase.IsFinal">
            <summary>
            GGets a value indicating whether the method is final.
            </summary>
            <value>
             true if this method is final; otherwise, false.
            </value>
        </member>
        <member name="P:System.Reflection.MethodBase.IsVirtual">
            <summary>
            Gets a value indicating whether the method is virtual 
            </summary>
            <value>
            true if this method is virtual; otherwise, false.
            </value>
        </member>
        <member name="P:System.Reflection.MethodBase.IsAbstract">
            <summary>
            Gets a value indicating whether the method is abstract
            </summary>
            <value>
            true if this method is abstract; otherwise, false.
            </value>
        </member>
        <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the method or constructor represented by the current instance, using the specified parameters.
            </summary>
            <param name="obj">The object on which to invoke the method or constructor. If a method is static, this argument is ignored. 
            If a constructor is static, this argument must be null or an instance of the class that defines the constructor.</param>
            <param name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, 
            order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, parameters should be null.</param>
            <returns>An object containing the return value of the invoked method, or null in the case of a constructor.</returns>
        </member>
        <member name="P:System.Reflection.MethodBase.Name">
            <summary>
            Gets the name of the current member.
            </summary>
            <value>
            A String containing the name of this member.
            </value>
        </member>
        <member name="P:System.Reflection.MethodBase.DeclaringType">
            <summary>
            Gets the class that declares this member.
            </summary>
            <value>
            The Type object for the class that declares this member.
            </value>
        </member>
        <member name="T:System.Reflection.MethodImplAttributes">
            <summary>
            Specifies flags for the attributes of a method implementation.
            </summary>
        </member>
        <member name="F:System.Reflection.MethodImplAttributes.CodeTypeMask">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies flags about code type.
            </summary>
        </member>
        <member name="F:System.Reflection.MethodImplAttributes.IL">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is in Microsoft intermediate language (MSIL).
            </summary>
        </member>
        <member name="F:System.Reflection.MethodImplAttributes.Native">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is native.
            </summary>
        </member>
        <member name="F:System.Reflection.MethodImplAttributes.OPTIL">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is in Optimized Intermediate Language (OPTIL).
            </summary>
        </member>
        <member name="F:System.Reflection.MethodImplAttributes.Runtime">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is provided by the runtime.
            </summary>
        </member>
        <member name="F:System.Reflection.MethodImplAttributes.ManagedMask">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies whether the method is implemented in managed or unmanaged code.
            </summary>
        </member>
        <member name="F:System.Reflection.MethodImplAttributes.Unmanaged">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method is implemented in unmanaged code.
            </summary>
        </member>
        <member name="F:System.Reflection.MethodImplAttributes.Managed">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method is implemented in managed code.
            </summary>
        </member>
        <member name="F:System.Reflection.MethodImplAttributes.ForwardRef">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method is not defined.
            </summary>
        </member>
        <member name="F:System.Reflection.MethodImplAttributes.PreserveSig">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method signature is exported exactly as declared.
            </summary>
        </member>
        <member name="F:System.Reflection.MethodImplAttributes.InternalCall">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies an internal call.
            </summary>
        </member>
        <member name="F:System.Reflection.MethodImplAttributes.Synchronized">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method is single-threaded through the body. 
            Static methods (Shared in Visual Basic) lock on the type, whereas instance methods lock on the instance. You can also use the C# lock statement or the Visual Basic 
            SyncLock statement for this purpose.
            </summary>
        </member>
        <member name="F:System.Reflection.MethodImplAttributes.NoInlining">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method cannot be inlined.
            </summary>
        </member>
        <member name="F:System.Reflection.MethodImplAttributes.MaxMethodImplVal">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies a range check value.
            </summary>
        </member>
        <member name="T:System.Reflection.MethodInfo">
            <summary>
            Discovers the attributes of a method and provides access to method metadata.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="P:System.Reflection.MethodInfo.MemberType">
            <summary>
            Gets a MemberTypes value indicating that this member is a method.
            </summary>
            <value>
            A MemberTypes value indicating that this member is a method.
            </value>
        </member>
        <member name="P:System.Reflection.MethodInfo.ReturnType">
            <summary>
            Gets the return type of this method.
            </summary>
            <value>
            The return type of this method.
            </value>
            <remarks>To get the return type property, first get the class Type. From the Type, get the MethodInfo. From the MethodInfo, get the ReturnType.</remarks>
        </member>
        <member name="T:System.Reflection.PropertyInfo">
            <summary>
            Discovers the attributes of a property and provides access to property metadata.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="P:System.Reflection.PropertyInfo.PropertyType">
            <summary>
            Gets the type of this property.
            </summary>
            <value>
            The type of this property.
            </value>
        </member>
        <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
            <summary>
            Returns the property value of a specified object with optional index values for indexed properties.
            </summary>
            <param name="obj">The object whose property value will be returned.</param>
            <param name="index">Optional index values for indexed properties. The indexes of indexed properties are zero-based. This value should be null for non-indexed properties.</param>
            <returns>The property value of the specified object.</returns>
        </member>
        <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
            <summary>
            Sets the property value of a specified object with optional index values for index properties.
            </summary>
            <param name="obj">The object whose property value will be set.</param>
            <param name="value">The new property value.</param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
        </member>
        <member name="T:System.RuntimeArgumentHandle">
            <summary>
            This value type is used for constructing System.ArgIterator.
            </summary>
        </member>
        <member name="T:System.RuntimeFieldHandle">
            <summary>
            Represents a field using an internal metadata token.
            </summary>
        </member>
        <member name="T:System.RuntimeMethodHandle">
            <summary>
            RuntimeMethodHandle is a handle to the internal metadata representation of a method.
            </summary>
        </member>
        <member name="M:System.RuntimeType.GetInterfaces">
            <summary>
            This method will return all of the interfaces implemented by a class
            </summary>
        </member>
        <member name="T:System.RuntimeTypeHandle">
            <summary>
            Represents a type using an internal metadata token.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
            <summary>
            Specifies the name of the property that accesses the attributed field.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AccessedThroughPropertyAttribute class with the name of the property used to access the attributed field.
            </summary>
            <param name="propertyName">The name of the property used to access the attributed field.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
            <summary>
            Gets the name of the property used to access the attributed field.
            </summary>
            <value>
            The name of the property used to access the attributed field.
            </value>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
            <summary>
            Indicates that a method is an extension method, or that a class or assembly contains extension methods.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
            <summary>
            Indicates the name by which an indexer is known in programming languages that do not support indexers directly.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IndexerNameAttribute class.
            </summary>
            <param name="indexerName">The name of the indexer, as shown to other languages.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
            <summary>
            Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InternalsVisibleToAttribute class with the name of the specified friend assembly.
            </summary>
            <param name="assemblyName">The name of a friend assembly.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
            <summary>
            Gets the name of the friend assembly to which all types and type members that are marked with the internal keyword are to be made visible.
            </summary>
            <value>
            A string that represents the name of the friend assembly.
            </value>
        </member>
        <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
            <summary>
            Defines the details of how a method is implemented.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Unmanaged">
            <summary>
            The method is implemented in unmanaged code.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.ForwardRef">
            <summary>
            The method is declared, but its implementation is provided elsewhere.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
            <summary>
            The method signature is exported exactly as declared.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.InternalCall">
            <summary>
            The call is internal, that is, it calls a method that is implemented within the common language runtime.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Synchronized">
            <summary>
            The method can be executed by only one thread at a time. Static methods lock on the type, whereas instance methods lock on the instance.
            Only one thread can execute in any of the instance functions, and only one thread can execute in any of a class's static functions.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
            <summary>
            The method cannot be inlined. Inlining is an optimization by which a method call is replaced with the method body.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.MethodCodeType">
            <summary>
            Defines how a method is implemented.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodCodeType.IL">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is in Microsoft intermediate language (MSIL).
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodCodeType.Native">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method is implemented in native code.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodCodeType.OPTIL">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is in optimized intermediate language (OPTIL).
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodCodeType.Runtime">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is provided by the runtime.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
            <summary>
            Specifies the details of how a method is implemented. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplAttribute.MethodCodeType">
            <summary>
            A MethodCodeType _value indicating what kind of implementation is provided for this method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
            <summary>
            Initializes a new instance of the MethodImplAttribute class with the specified MethodImplOptions _value.
            </summary>
            <param name="methodImplOptions">A MethodImplOptions _value specifying properties of the attributed method.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the MethodImplAttribute class with the specified MethodImplOptions _value.
            </summary>
            <param name="_value">A bitmask representing the desired MethodImplOptions _value which specifies properties of the attributed method.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor">
            <summary>
            Initializes a new instance of the MethodImplAttribute class.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
            <summary>
            Gets the MethodImplOptions _value describing the attributed method.
            </summary>
            <_value>
            The MethodImplOptions _value describing the attributed method.
            </_value>
        </member>
        <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
            <summary>
            Provides a set of static methods and properties that provide support for compilers. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
            <summary>
            Provides a fast way to initialize an array from data that is stored in a module.
            </summary>
            <param name="array">The array to be initialized.</param>
            <param name="fldHandle">A field handle that specifies the location of the data used to initialize the array.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
            <summary>
            Boxes a value type.
            </summary>
            <param name="obj">The value type to be boxed.</param>
            <returns>A boxed copy of obj if it is a value class; otherwise, obj itself.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
            <summary>
            Runs a specified class constructor method.
            </summary>
            <param name="type">A type handle that specifies the class constructor method to run.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
            <summary>
            Gets the offset, in bytes, to the data in the given string.
            </summary>
            <value>
            The byte offset, from the start of the String object to the first character in the string.
            </value>
        </member>
        <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
            <summary>
            Controls accessibility of an individual managed type or member, or of all types within an assembly, to COM.
            </summary>
        </member>
        <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ComVisibleAttribute class.
            </summary>
            <param name="visibility">true to indicate that the type is visible to COM; otherwise, false. The default is true.</param>
        </member>
        <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
            <summary>
            Gets a value that indicates whether the COM type is visible.
            </summary>
            <value>
            true if the type is visible; otherwise, false. The default value is true.
            </value>
        </member>
        <member name="T:System.Runtime.InteropServices.GuidAttribute">
            <summary>
            Supplies an explicit System.Guid when an automatic GUID is undesirable.
            </summary>
        </member>
        <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the GuidAttribute class with the specified GUID.
            </summary>
            <param name="guid">The Guid to be assigned.</param>
        </member>
        <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
            <summary>
            Gets the Guid of the class.
            </summary>
            <value>
            The Guid of the class.
            </value>
        </member>
        <member name="T:System.Runtime.InteropServices.OutAttribute">
            <summary>
            Indicates that data should be marshaled from callee back to caller.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
            <summary>
            Lets you control the physical layout of the data fields of a class or structure in memory.
            </summary>
        </member>
        <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
            <summary>
            Initalizes a new instance of the StructLayoutAttribute class with the specified System.Runtime.InteropServices.LayoutKind enumeration member.
            </summary>
            <param name="layoutKind">One of the enumeration values that specifes how the class or structure should be arranged.</param>
        </member>
        <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)">
            <summary>
            Initalizes a new instance of the StructLayoutAttribute class with the specified System.Runtime.InteropServices.LayoutKind enumeration member.
            </summary>
            <param name="layoutKind">A 16-bit integer that represents one of the LayoutKind values that specifes how the class or structure should be arranged.</param>
        </member>
        <member name="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
            <summary>
            Gets the LayoutKind value that specifies how the class or structure is arranged.
            </summary>
            <value>
            One of the enumeration values that specifies how the class or structure is arranged.
            </value>
        </member>
        <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
            <summary>
            Controls the alignment of data fields of a class or structure in memory.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
            <summary>
            Indicates the absolute size of the class or structure.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
            <summary>
            Indicates whether string data fields within the class should be marshaled as LPWSTR or LPSTR by default.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.CharSet">
            <summary>
            Dictates which character set marshaled strings should use.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.CharSet.None">
            <summary>
            This value is obsolete and has the same behavior as CharSet.Ansi.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
            <summary>
            Marshal strings as multiple-byte character strings.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
            <summary>
            Marshal strings as Unicode 2-byte characters.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.CharSet.Auto">
            <summary>
            Automatically marshal strings appropriately for the target operating system. The default is Unicode on Windows NT, Windows 2000, Windows XP, and the Windows Server 2003 family;
            the default is Ansi on Windows 98 and Windows Me. Although the common language runtime default is Auto, languages may override this default. 
            For example, by default C# marks all methods and types as Ansi.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.LayoutKind">
            <summary>
            Controls the layout of an object when exported to unmanaged code.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
            <summary>
            The members of the object are laid out sequentially, in the order in which they appear when exported to unmanaged memory. 
            The members are laid out according to the packing specified in StructLayoutAttribute.Pack, and can be noncontiguous.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
            <summary>
            The precise position of each member of an object in unmanaged memory is explicitly controlled, subject to the setting of the StructLayoutAttribute.Pack field. 
            Each member must use the FieldOffsetAttribute to indicate the position of that field within the type.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
            <summary>
            The runtime automatically chooses an appropriate layout for the members of an object in unmanaged memory. 
            Objects defined with this enumeration member cannot be exposed outside of managed code. Attempting to do so generates an exception.
            </summary>
        </member>
        <member name="T:System.Runtime.Remoting.RemotingServices">
            <summary>
            Provides several methods for using and publishing remoted objects and proxies. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Runtime.Remoting.RemotingServices.IsTransparentProxy(System.Object)">
            <summary>
            Returns a Boolean value that indicates whether the given object is a transparent proxy or a real object.
            </summary>
            <param name="proxy">The reference to the object to check.</param>
            <returns>A Boolean value that indicates whether the object specified in the proxy parameter is a transparent proxy or a real object.</returns>
        </member>
        <member name="T:System.Runtime.Versioning.TargetFrameworkAttribute">
            <summary>
            Identifies the version of the .NET Framework that a particular assembly was compiled against.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.TargetFrameworkAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the TargetFrameworkAttribute class by specifying the .NET Framework version against which an assembly was built.
            </summary>
            <param name="frameworkName">The version of the .NET Framework against which the assembly was built.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName">
            <summary>
            Gets the name of the .NET Framework version against which a particular assembly was compiled.
            </summary>
            <value>
            The name of the .NET Framework version with which the assembly was compiled.
            </value>
        </member>
        <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkDisplayName">
            <summary>
            Gets the display name of the .NET Framework version against which an assembly was built.
            </summary>
            <value>
            The display name of the .NET Framework version.
            </value>
        </member>
        <member name="T:System.SByte">
            <summary>
            Represents an 8-bit signed integer.
            </summary>
        </member>
        <member name="F:System.SByte.MaxValue">
            <summary>
            Represents the largest possible value of SByte. This field is constant.
            </summary>
            <remarks>The value of this constant is 127; that is, hexadecimal 0x7F.</remarks>
        </member>
        <member name="F:System.SByte.MinValue">
            <summary>
            Represents the smallest possible value of SByte. This field is constant.
            </summary>
            /// <remarks>The value of this constant is -128; that is, hexadecimal 0x80.</remarks>
        </member>
        <member name="M:System.SByte.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
        </member>
        <member name="M:System.SByte.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using the specified format.
            </summary>
            <param name="format">A standard or custom numeric format string.</param>
            <returns>The string representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:System.SByte.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its 8-bit signed integer equivalent.
            </summary>
            <param name="s">A string that represents a number to convert. The string is interpreted using the NumberStyles.Integer style.</param>
            <returns>An 8-bit signed integer that is equivalent to the number contained in the s parameter.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:System.SerializableAttribute">
            <summary>
            Indicates that a class can be serialized. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:System.Single">
            <summary>
            Represents a single-precision floating-point number.
            </summary>
        </member>
        <member name="F:System.Single.MinValue">
            <summary>
            Represents the smallest possible value of Single. This field is constant.
            </summary>
            <remarks>The value of this constant is negative 3.402823e38.</remarks>
        </member>
        <member name="F:System.Single.Epsilon">
            <summary>
            Represents the smallest positive Single value that is greater than zero. This field is constant.
            </summary>
        </member>
        <member name="F:System.Single.MaxValue">
            <summary>
            Represents the largest possible value of Single. This field is constant.
            </summary>
            <remarks>The value of this constant is positive 3.40282347E+38.</remarks>
        </member>
        <member name="F:System.Single.NegativeInfinity">
            <summary>
            Represents negative infinity. This field is constant.
            </summary>
        </member>
        <member name="F:System.Single.PositiveInfinity">
            <summary>
            Represents positive infinity. This field is constant.
            </summary>
        </member>
        <member name="F:System.Single.NaN">
            <summary>
            Represents a value that is not a number (NaN). This field is constant.
            </summary>
        </member>
        <member name="M:System.Single.IsInfinity(System.Single)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative or positive infinity.
            </summary>
            <param name="f">A single-precision floating-point number. </param>
            <returns>
            <see langword="true"/> if f evaluates to <see cref="F:System.Single.PositiveInfinity"/> or <see cref="F:System.Single.NegativeInfinity"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Single.IsNaN(System.Single)">
            <summary>
            Returns a value that indicates whether the specified value is not a number (<see cref="F:System.Single.NaN"/>).
            </summary>
            <param name="f">A single-precision floating-point number. </param>
            <returns>
            <see langword="true"/> if f evaluates to <see cref="F:System.Single.NaN"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Single.IsNegativeInfinity(System.Single)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative infinity.
            </summary>
            <param name="f">A single-precision floating-point number.</param>
            <returns>
            <see langword="true"/> if f evaluates to <see cref="F:System.Single.NegativeInfinity"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Single.IsPositiveInfinity(System.Single)">
            <summary>
            Returns a value indicating whether the specified number evaluates to positive infinity.
            </summary>
            <param name="f">A single-precision floating-point number. </param>
            <returns>
            <see langword="true"/> if d evaluates to <see cref="F:System.Single.PositiveInfinity"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Single.CompareTo(System.Single)">
            <summary>
            Compares this instance to a specified single-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified single-precision floating-point number.
            </summary>
            <param name="value">A single-precision floating-point number to compare.</param>
            <returns>A signed number indicating the relative values of this instance and value.
            Less than zero: This instance is less than value. -or- This instance is not a number (<see cref="F:System.Single.NaN"/>) and value is a number.
            Zero: This instance is equal to value. -or- Both this instance and value are not a number (<see cref="F:System.Single.NaN"/>), <see cref="F:System.Single.PositiveInfinity"/>, or <see cref="F:System.Single.NegativeInfinity"/>. 
            Greater than zero: This instance is greater than value. -or- This instance is a number and value is not a number (<see cref="F:System.Single.NaN"/>). 
            </returns>
        </member>
        <member name="M:System.Single.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its single-precision floating-point number equivalent.
            </summary>
            <param name="s">A string that contains a number to convert. </param>
            <returns>A single-precision floating-point number equivalent to the numeric value or symbol specified in <code>s</code>.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:System.Single.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:System.Single.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using the specified format.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>The string representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:System.Single.TryParse(System.String,System.Single@)">
            <summary>
            Converts the string representation of a number to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert. </param>
            <param name="result">When this method returns, contains single-precision floating-point number equivalent to the numeric value or symbol contained in s, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is <see langword="null"/> or Empty, is not a number in a valid format, or represents a number less than <see cref="F:System.Single.MinValue"/> or greater than <see cref="F:System.Single.MaxValue"/>. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
            <returns><see langword="true"/> if s was converted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:System.SpanByte">
            <summary>
            Provides a type- and memory-safe representation of a contiguous region of arbitrary byte array
            </summary>
        </member>
        <member name="M:System.SpanByte.#ctor(System.Byte[])">
            <summary>
            Creates a new System.SpanByte object over the entirety of a specified array.
            </summary>
            <param name="array">The array from which to create the System.Span object.</param>
        </member>
        <member name="M:System.SpanByte.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a new System.SpanByte object that includes a specified number of elements
            of an array starting at a specified index.
            </summary>
            <param name="array">The source array.</param>
            <param name="start">The index of the first element to include in the new System.Span</param>
            <param name="length">The number of elements to include in the new System.Span</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            array is null, but start or length is non-zero. -or- start is outside the bounds
            of the array. -or- start and length exceeds the number of elements in the array.
            </exception>
        </member>
        <member name="P:System.SpanByte.Item(System.Int32)">
            <summary>
            Gets the element at the specified zero-based index.
            </summary>
            <param name="index">The zero-based index of the element.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:System.SpanByte.Empty">
            <summary>
            Returns an empty System.Span object.
            </summary>
        </member>
        <member name="P:System.SpanByte.Length">
            <summary>
            Returns the length of the current span.
            </summary>
        </member>
        <member name="P:System.SpanByte.IsEmpty">
            <summary>
            Returns a value that indicates whether the current System.Span is empty.
            true if the current span is empty; otherwise, false.
            </summary>
        </member>
        <member name="M:System.SpanByte.CopyTo(System.SpanByte)">
            <summary>
            Copies the contents of this System.Span into a destination System.Span.
            </summary>
            <param name="destination"> The destination System.Span object.</param>
            <exception cref="T:System.ArgumentException">
            destination is shorter than the source System.Span.
            </exception>
        </member>
        <member name="M:System.SpanByte.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current span that begins at a specified index.
            </summary>
            <param name="start">The index at which to begin the slice.</param>
            <returns>A span that consists of all elements of the current span from start to the end of the span.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">start is less than zero or greater than System.Span.Length.</exception>
        </member>
        <member name="M:System.SpanByte.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current span starting at a specified index for a specified length.
            </summary>
            <param name="start">The index at which to begin this slice.</param>
            <param name="length">The desired length for the slice.</param>
            <returns>A span that consists of length elements from the current span starting at start.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">start or start + length is less than zero or greater than System.Span.Length.</exception>
        </member>
        <member name="M:System.SpanByte.ToArray">
            <summary>
            Copies the contents of this span into a new array.
            </summary>
            <returns> An array containing the data in the current span.</returns>
        </member>
        <member name="M:System.SpanByte.op_Implicit(System.Byte[])~System.SpanByte">
            <summary>
            Implicit conversion of an array to a span of byte
            </summary>
            <param name="array"></param>
        </member>
        <member name="T:System.String">
            <summary>
            Represents text as a sequence of UTF-16 code units.
            </summary>
        </member>
        <member name="M:System.String.GetEnumerator">
            <summary>
            **Not supported in NanoFramework**  
            Return an enumerator that iterate on each char of the string.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="F:System.String.Empty">
            <summary>
            Represents the empty string. This field is read-only.
            </summary>
        </member>
        <member name="M:System.String.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a String object, have the same value.
            </summary>
            <param name="obj">The string to compare to this instance.</param>
            <returns>true if obj is a String and its value is the same as this instance; otherwise, false. If obj is null, the method returns false.</returns>
        </member>
        <member name="M:System.String.Equals(System.String,System.String)">
            <summary>
            Determines whether two specified String objects have the same value.
            </summary>
            <param name="a">The first string to compare, or null.</param>
            <param name="b">The second string to compare, or null.</param>
            <returns>true if the value of a is the same as the value of b; otherwise, false. If both a and b are null, the method returns true.</returns>
        </member>
        <member name="M:System.String.op_Equality(System.String,System.String)">
            <summary>
            Determines whether two specified strings have the same value.
            </summary>
            <param name="a">The first string to compare, or null.</param>
            <param name="b">The second string to compare, or null.</param>
            <returns>true if the value of a is the same as the value of b; otherwise, false.</returns>
        </member>
        <member name="M:System.String.op_Inequality(System.String,System.String)">
            <summary>
            Determines whether two specified strings have different values.
            </summary>
            <param name="a">The first string to compare, or null.</param>
            <param name="b">The second string to compare, or null.</param>
            <returns>true if the value of a is different from the value of b; otherwise, false.</returns>
        </member>
        <member name="P:System.String.Chars(System.Int32)">
            <summary>
            Gets the Char object at a specified position in the current String object.
            </summary>
            <value>The object at position index.</value>
            <param name="index">A position in the current string.</param>
        </member>
        <member name="M:System.String.ToCharArray">
            <summary>
            Copies the characters in this instance to a Unicode character array.
            </summary>
            <returns>A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.</returns>
        </member>
        <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
            <summary>
            Copies the characters in a specified substring in this instance to a Unicode character array.
            </summary>
            <param name="startIndex">The starting position of a substring in this instance.</param>
            <param name="length">The length of the substring in this instance.</param>
            <returns>A Unicode character array whose elements are the length number of characters in this instance starting from character position startIndex.</returns>
        </member>
        <member name="P:System.String.Length">
            <summary>
            Gets the number of characters in the current String object.
            </summary>
            <value>
            The number of characters in the current string.
            </value>
        </member>
        <member name="M:System.String.Split(System.Char[])">
            <summary>
            Splits a string into substrings that are based on the characters in an array.
            </summary>
            <param name="separator">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or null.</param>
            <returns>An array whose elements contain the substrings from this instance that are delimited by one or more characters in separator. For more information, see the Remarks section.</returns>
        </member>
        <member name="M:System.String.Split(System.Char[],System.Int32)">
            <summary>
            Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return.
            </summary>
            <param name="separator">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or null.</param>
            <param name="count">The maximum number of substrings to return.</param>
            <returns>An array whose elements contain the substrings in this instance that are delimited by one or more characters in separator. For more information, see the Remarks section.</returns>
        </member>
        <member name="M:System.String.Substring(System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.
            </summary>
            <param name="startIndex">The zero-based starting character position of a substring in this instance.</param>
            <returns>A string that is equivalent to the substring that begins at startIndex in this instance, or Empty if startIndex is equal to the length of this instance.</returns>
        </member>
        <member name="M:System.String.Substring(System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.
            </summary>
            <param name="startIndex">The zero-based starting character position of a substring in this instance.</param>
            <param name="length">The number of characters in the substring.</param>
            <returns>A string that is equivalent to the substring of length length that begins at startIndex in this instance, or Empty if startIndex is equal to the length of this instance and length is zero.</returns>
        </member>
        <member name="M:System.String.Trim(System.Char[])">
            <summary>
            Removes all leading and trailing occurrences of a set of characters specified in an array from the current String object.
            </summary>
            <param name="trimChars">An array of Unicode characters to remove, or null.</param>
            <returns>The string that remains after all occurrences of the characters in the trimChars parameter are removed from the start and end of the current string.
            If trimChars is null or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, 
            the method returns the current instance unchanged.</returns>
        </member>
        <member name="M:System.String.TrimStart(System.Char[])">
            <summary>
            Removes all leading occurrences of a set of characters specified in an array from the current String object.
            </summary>
            <param name="trimChars">An array of Unicode characters to remove, or null.</param>
            <returns>The string that remains after all occurrences of characters in the trimChars parameter are removed from the start of the current string. If trimChars is null or an empty array, white-space characters are removed instead.</returns>
        </member>
        <member name="M:System.String.TrimEnd(System.Char[])">
            <summary>
            Removes all trailing occurrences of a set of characters specified in an array from the current String object.
            </summary>
            <param name="trimChars">An array of Unicode characters to remove, or null.</param>
            <returns>The string that remains after all occurrences of the characters in the trimChars parameter are removed from the end of the current string. If trimChars is null or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
        </member>
        <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the String class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.
            </summary>
            <param name="value">An array of Unicode characters. </param>
            <param name="startIndex">The starting position within value. </param>
            <param name="length">The number of characters within value to use. </param>
        </member>
        <member name="M:System.String.#ctor(System.Char[])">
            <summary>
            Initializes a new instance of the String class to the value indicated by an array of Unicode characters.
            </summary>
            <param name="value">An array of Unicode characters.</param>
        </member>
        <member name="M:System.String.#ctor(System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the String class to the value indicated by a specified Unicode character repeated a specified number of times.
            </summary>
            <param name="c">A Unicode character.</param>
            <param name="count">The number of times c occurs.</param>
        </member>
        <member name="M:System.String.Compare(System.String,System.String)">
            <summary>
            Compares two specified String objects and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
            <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</returns>
        </member>
        <member name="M:System.String.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified Object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified Object.
            </summary>
            <param name="value">An object that evaluates to a String.</param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.</returns>
        </member>
        <member name="M:System.String.CompareTo(System.String)">
            <summary>
            Compares this instance with a specified String object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.
            </summary>
            <param name="strB">The string to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the strB parameter.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character in this string.
            </summary>
            <param name="value">A Unicode character to seek.</param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.Char,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.
            </summary>
            <param name="value">A Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of value from the start of the string if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.
            </summary>
            <param name="value">A Unicode character to seek. </param>
            <param name="startIndex">The search starting position. </param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:System.String.IndexOfAny(System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found.</returns>
        </member>
        <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found.</returns>
        </member>
        <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.String)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in this instance.
            </summary>
            <param name="value">The string to seek.</param>
            <returns>The zero-based index position of value if that string is found, or -1 if it is not. If value is String.Empty, the return value is 0.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position.
            </summary>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of value from the start of the current instance if that string is found, or -1 if it is not. If value is String.Empty, the return value is startIndex.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions.
            </summary>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The zero-based index position of value from the start of the current instance if that string is found, or -1 if it is not. If value is String.Empty, the return value is startIndex.</returns>
        </member>
        <member name="M:System.String.LastIndexOf(System.Char)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.
            </summary>
            <param name="value">The Unicode character to seek.</param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.
            </summary>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The starting position of the search. The search proceeds from startIndex toward the beginning of this instance.</param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not found or if the current instance equals String.Empty.</returns>
        </member>
        <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.
            </summary>
            <param name="value">The Unicode character to seek. </param>
            <param name="startIndex">The starting position of the search. The search proceeds from startIndex toward the beginning of this instance.</param>
            <param name="count">The number of character positions to examine. </param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not found or if the current instance equals String.Empty.</returns>
        </member>
        <member name="M:System.String.LastIndexOfAny(System.Char[])">
            <summary>
            Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <returns>The index position of the last occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found.</returns>
        </member>
        <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position. The search proceeds from startIndex toward the beginning of this instance.</param>
            <returns>The index position of the last occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found or if the current instance equals String.Empty.</returns>
        </member>
        <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position. The search proceeds from startIndex toward the beginning of this instance.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The index position of the last occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found or if the current instance equals String.Empty.</returns>
        </member>
        <member name="M:System.String.LastIndexOf(System.String)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified string within this instance.
            </summary>
            <param name="value">The string to seek.</param>
            <returns>The zero-based starting index position of value if that string is found, or -1 if it is not. If value is String.Empty, the return value is the last index position in this instance.</returns>
        </member>
        <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.
            </summary>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position. The search proceeds from startIndex toward the beginning of this instance.</param>
            <returns>The zero-based starting index position of value if that string is found, or -1 if it is not found or if the current instance equals String.Empty. If value is String.Empty, the return value is the smaller of startIndex and the last index position in this instance.</returns>
        </member>
        <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.
            </summary>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position. The search proceeds from startIndex toward the beginning of this instance.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The zero-based starting index position of value if that string is found, or -1 if it is not found or if the current instance equals String.Empty. If value is Empty, the return value is the smaller of startIndex and the last index position in this instance.</returns>
        </member>
        <member name="M:System.String.ToLower">
            <summary>
            Returns a copy of this string converted to lowercase.
            </summary>
            <returns>A string in lowercase.</returns>
        </member>
        <member name="M:System.String.ToUpper">
            <summary>
            Returns a copy of this string converted to uppercase.
            </summary>
            <returns>The uppercase equivalent of the current string.</returns>
        </member>
        <member name="M:System.String.ToString">
            <summary>
            Returns this instance of String; no actual conversion is performed.
            </summary>
            <returns>The current string.</returns>
        </member>
        <member name="M:System.String.Trim">
            <summary>
            Removes all leading and trailing white-space characters from the current String object.
            </summary>
            <returns>The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
        </member>
        <member name="M:System.String.Concat(System.Object)">
            <summary>
            Creates the string representation of a specified object.
            </summary>
            <param name="arg0">The object to represent, or null.</param>
            <returns>The string representation of the value of arg0, or String.Empty if arg0 is null.</returns>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object)">
            <summary>
            Concatenates the string representations of two specified objects.
            </summary>
            <param name="arg0">The first object to concatenate.</param>
            <param name="arg1">The second object to concatenate.</param>
            <returns>The concatenated string representations of the values of arg0 and arg1.</returns>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
            <summary>
            Concatenates the string representations of three specified objects.
            </summary>
            <param name="arg0">The first object to concatenate.</param>
            <param name="arg1">The second object to concatenate.</param>
            <param name="arg2">The third object to concatenate.</param>
            <returns>The concatenated string representations of the values of arg0, arg1 and arg2.</returns>
        </member>
        <member name="M:System.String.Concat(System.Object[])">
            <summary>
            Concatenates the string representations of the elements in a specified Object array.
            </summary>
            <param name="args">An object array that contains the elements to concatenate.</param>
            <returns>The concatenated string representations of the values of the elements in args.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:System.String.Concat(System.String,System.String)">
            <summary>
            Concatenates two specified instances of String.
            </summary>
            <param name="str0">The first string to concatenate.</param>
            <param name="str1">The second string to concatenate.</param>
            <returns>The concatenation of str0 and str1.</returns>
        </member>
        <member name="M:System.String.Concat(System.String,System.String,System.String)">
            <summary>
            Concatenates three specified instances of String.
            </summary>
            <param name="str0">The first string to concatenate.</param>
            <param name="str1">The second string to concatenate.</param>
            <param name="str2">The third string to concatenate.</param>
            <returns>The concatenation of str0, str1 and str2.</returns>
        </member>
        <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
            <summary>
            Concatenates four specified instances of String.
            </summary>
            <param name="str0">The first string to concatenate.</param>
            <param name="str1">The second string to concatenate.</param>
            <param name="str2">The third string to concatenate.</param>
            <param name="str3">The fourth string to concatenate.</param>
            <returns>The concatenation of str0, str1, str2 and str3.</returns>
        </member>
        <member name="M:System.String.Concat(System.String[])">
            <summary>
            Concatenates the elements of a specified String array.
            </summary>
            <param name="values">An array of string instances.</param>
            <returns>The concatenated elements of values.</returns>
        </member>
        <member name="M:System.String.Intern(System.String)">
            <summary>
            Retrieves the system's reference to the specified String.
            </summary>
            <param name="str">A string to search for in the intern pool.</param>
            <returns>The system's reference to str, if it is interned; otherwise, a new reference to a string with the value of str.</returns>
        </member>
        <member name="M:System.String.IsInterned(System.String)">
            <summary>
            Retrieves a reference to a specified String.
            </summary>
            <param name="str">The string to search for in the intern pool.</param>
            <returns>A reference to str if it is in the common language runtime intern pool; otherwise, null.</returns>
        </member>
        <member name="M:System.String.Format(System.String,System.Object[])">
            <summary>
            Replaces the format items in a string with the string representations of corresponding objects in a specified array.
            </summary>
            <param name="format">A composite format string</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A copy of format in which the format items have been replaced by the string representation of the corresponding objects in args.</returns>
        </member>
        <member name="M:System.String.PadLeft(System.Int32,System.Char)">
            <summary>
            Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.
            </summary>
            <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
            <param name="paddingChar">A Unicode padding character.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.PadRight(System.Int32,System.Char)">
            <summary>
            Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.
            </summary>
            <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
            <param name="paddingChar">A Unicode padding character.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether the specified string is <see langword="null"/> or an empty string ("").
            </summary>
            <param name="value">The string to test.</param>
            <returns><see langword="true"/> if the value parameter is <see langword="null"/> or an empty string (""); otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:System.SystemException">
            <summary>
            Serves as the base class for system exceptions namespace.
            </summary>
        </member>
        <member name="M:System.SystemException.#ctor">
            <summary>
            Initializes a new instance of the SystemException class.
            </summary>
        </member>
        <member name="M:System.SystemException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SystemException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.SystemException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SystemException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:System.STAThreadAttribute">
            <summary>
            Indicates that the COM threading model for an application is single-threaded apartment (STA).
            </summary>
        </member>
        <member name="M:System.STAThreadAttribute.#ctor">
            <summary>
            Initializes a new instance of the STAThreadAttribute class.
            </summary>
        </member>
        <member name="T:System.MTAThreadAttribute">
            <summary>
            Indicates that the COM threading model for an application is multithreaded apartment (MTA).
            </summary>
        </member>
        <member name="M:System.MTAThreadAttribute.#ctor">
            <summary>
            Initializes a new instance of the MTAThreadAttribute class.
            </summary>
        </member>
        <member name="T:System.Threading.AutoResetEvent">
            <summary>
            Notifies a waiting thread that an event has occurred. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AutoResetEvent class with a Boolean value indicating whether to set the initial state to signaled.
            </summary>
            <param name="initialState">true to set the initial state to signaled; false to set the initial state to non-signaled.</param>
        </member>
        <member name="M:System.Threading.AutoResetEvent.Reset">
            <summary>
            Sets the state of the event to nonsignaled, causing threads to block.
            </summary>
            <returns>true if the operation succeeds; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.AutoResetEvent.Set">
            <summary>
            Sets the state of the event to signaled, allowing one or more waiting threads to proceed.
            </summary>
            <returns>true if the operation succeeds; otherwise, false.</returns>
        </member>
        <member name="T:System.Threading.Interlocked">
            <summary>
            Provides atomic operations for variables that are shared by multiple threads.
            </summary>
        </member>
        <member name="M:System.Threading.Interlocked.Increment(System.Int32@)">
            <summary>
            Increments a specified variable and stores the result, as an atomic operation.
            </summary>
            <param name="location">The variable whose value is to be incremented.</param>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:System.Threading.Interlocked.Decrement(System.Int32@)">
            <summary>
            Decrements a specified variable and stores the result, as an atomic operation.
            </summary>
            <param name="location">The variable whose value is to be decremented.</param>
            <returns>The decremented value.</returns>
        </member>
        <member name="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
            <summary>
            Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation.
            </summary>
            <param name="location1">The variable to set to the specified value.</param>
            <param name="value">The value to which the location1 parameter is set.</param>
            <returns>The original value of location1.</returns>
        </member>
        <member name="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Compares two 32-bit signed integers for equality and, if they are equal, replaces the first value.
            </summary>
            <param name="location1">The destination, whose value is compared with comparand and possibly replaced.</param>
            <param name="value">The value that replaces the destination value if the comparison results in equality.</param>
            <param name="comparand">The value that is compared to the value at location1.</param>
            <returns>The original value in location1.</returns>
        </member>
        <member name="T:System.Threading.ManualResetEvent">
            <summary>
            Notifies one or more waiting threads that an event has occurred. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ManualResetEvent class with a Boolean value indicating whether to set the initial state to signaled.
            </summary>
            <param name="initialState">true to set the initial state signaled; false to set the initial state to nonsignaled.</param>
        </member>
        <member name="M:System.Threading.ManualResetEvent.Reset">
            <summary>
            Sets the state of the event to nonsignaled, causing threads to block.
            </summary>
            <returns>true if the operation succeeds; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.ManualResetEvent.Set">
            <summary>
            Sets the state of the event to signaled, allowing one or more waiting threads to proceed.
            </summary>
            <returns>true if the operation succeeds; otherwise, false.</returns>
        </member>
        <member name="T:System.Threading.Monitor">
            <summary>
            Provides a mechanism that synchronizes access to objects.
            </summary>
        </member>
        <member name="M:System.Threading.Monitor.Enter(System.Object)">
            <summary>
            Acquires an exclusive lock on the specified object.
            </summary>
            <param name="obj">The object on which to acquire the monitor lock.</param>
        </member>
        <member name="M:System.Threading.Monitor.Exit(System.Object)">
            <summary>
            Releases an exclusive lock on the specified object.
            </summary>
            <param name="obj">The object on which to release the lock.</param>
        </member>
        <member name="T:System.Threading.Thread">
            <summary>
            Creates and controls a thread, sets its priority, and gets its status.
            </summary>
        </member>
        <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
            <summary>
            Initializes a new instance of the Thread class.
            </summary>
            <param name="start">A ThreadStart delegate that represents the methods to be invoked when this thread begins executing.</param>
        </member>
        <member name="M:System.Threading.Thread.Start">
            <summary>
            Causes the operating system to change the state of the current instance to ThreadState.Running.
            </summary>
        </member>
        <member name="M:System.Threading.Thread.Abort">
            <summary>
            Raises a ThreadAbortException in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread.
            </summary>
        </member>
        <member name="M:System.Threading.Thread.Suspend">
            <summary>
            Either suspends the thread, or if the thread is already suspended, has no effect.
            </summary>
        </member>
        <member name="M:System.Threading.Thread.Resume">
            <summary>
            Obsolete : Resumes a thread that has been suspended.
            </summary>
        </member>
        <member name="P:System.Threading.Thread.Priority">
            <summary>
            Gets or sets a value indicating the scheduling priority of a thread.
            </summary>
            <value>One of the ThreadPriority values. The default value is ThreadPriority.Normal.</value>
        </member>
        <member name="P:System.Threading.Thread.ManagedThreadId">
            <summary>
            Gets a unique identifier for the current managed thread.
            </summary>
            <value>An integer that represents a unique identifier for this managed thread.</value>
        </member>
        <member name="P:System.Threading.Thread.IsAlive">
            <summary>
            Gets a value indicating the execution status of the current thread.
            </summary>
            <value>true if this thread has been started and has not terminated normally or aborted; otherwise, false.</value>
        </member>
        <member name="M:System.Threading.Thread.Join">
            <summary>
            Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and SendMessage pumping.
            </summary>
        </member>
        <member name="M:System.Threading.Thread.Join(System.Int32)">
            <summary>
            Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to terminate.</param>
            <returns>true if the thread has terminated; false if the thread has not terminated after the amount of time specified by the millisecondsTimeout parameter has elapsed.</returns>
        </member>
        <member name="M:System.Threading.Thread.Join(System.TimeSpan)">
            <summary>
            Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.
            </summary>
            <param name="timeout">A TimeSpan set to the amount of time to wait for the thread to terminate.</param>
            <returns>true if the thread terminated; false if the thread has not terminated after the amount of time specified by the timeout parameter has elapsed.</returns>
        </member>
        <member name="M:System.Threading.Thread.Sleep(System.Int32)">
            <summary>
            Suspends the current thread for the specified number of milliseconds.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds for which the thread is suspended. 
            If the value of the <paramref name="millisecondsTimeout"/> argument is zero, the thread relinquishes the remainder 
            of its time slice to any thread of equal priority that is ready to run. If there are no other threads 
            of equal priority that are ready to run, execution of the current thread is not suspended.</param>
            <remarks>
            The thread will not be scheduled for execution by the operating system for the amount of time specified. 
            You can specify Timeout.Infinite for the <paramref name="millisecondsTimeout"/> parameter to suspend the thread indefinitely. However, we recommend that you use other <see cref="N:System.Threading"/> classes such as <see cref="T:System.Threading.AutoResetEvent"/>, <see cref="T:System.Threading.ManualResetEvent"/>, <see cref="T:System.Threading.Monitor"/> or <see cref="T:System.Threading.WaitHandle"/> instead to synchronize threads or manage resources.
            The system clock ticks at a specific rate called the clock resolution. The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks. 
            </remarks>
        </member>
        <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
            <summary>
            Suspends the current thread for the specified amount of time.
            </summary>
            <param name="timeout">The amount of time for which the thread is suspended. 
            If the value of the <paramref name="timeout"/> argument is Zero, the thread relinquishes the remainder 
            of its time slice to any thread of equal priority that is ready to run. If there are no other threads 
            of equal priority that are ready to run, execution of the current thread is not suspended.</param>
            <remarks>
            The thread will not be scheduled for execution by the operating system for the amount of time specified. 
            You can specify <see cref="F:System.Threading.Timeout.Infinite"/> for the <paramref name="timeout"/> parameter to suspend the thread indefinitely. However, we recommend that you use other <see cref="N:System.Threading"/> classes such as <see cref="T:System.Threading.AutoResetEvent"/>, <see cref="T:System.Threading.ManualResetEvent"/>, <see cref="T:System.Threading.Monitor"/> or <see cref="T:System.Threading.WaitHandle"/> instead to synchronize threads or manage resources.
            The system clock ticks at a specific rate called the clock resolution. The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks. 
            </remarks>
        </member>
        <member name="P:System.Threading.Thread.CurrentThread">
            <summary>
            Gets the currently running thread.
            </summary>
            <value>A Thread that is the representation of the currently running thread.</value>
        </member>
        <member name="P:System.Threading.Thread.ThreadState">
            <summary>
            Gets a value containing the states of the current thread.
            </summary>
            <value>One of the ThreadState values indicating the state of the current thread. The initial value is Unstarted.</value>
        </member>
        <member name="T:System.Threading.ThreadAbortException">
            <summary>
            The exception that is thrown when a call is made to the Abort method. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:System.Threading.ThreadPriority">
            <summary>
            Specifies the scheduling priority of a Thread.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadPriority.Lowest">
            <summary>
            The Thread can be scheduled after threads with any other priority.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadPriority.BelowNormal">
            <summary>
            The Thread can be scheduled after threads with Normal priority and before those with Lowest priority.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadPriority.Normal">
            <summary>
            The Thread can be scheduled after threads with AboveNormal priority and before those with BelowNormal priority. Threads have Normal priority by default.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadPriority.AboveNormal">
            <summary>
            The Thread can be scheduled after threads with Highest priority and before those with Normal priority.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadPriority.Highest">
            <summary>
            The Thread can be scheduled before threads with any other priority.
            </summary>
        </member>
        <member name="T:System.Threading.ThreadStart">
            <summary>
            Represents the method that executes on a Thread.
            </summary>
        </member>
        <member name="T:System.Threading.ThreadState">
            <summary>
            Specifies the execution states of a Thread.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadState.Running">
            <summary>
            The thread has been started, it is not blocked, and there is no pending ThreadAbortException.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadState.StopRequested">
            <summary>
            The thread is being requested to stop. This is for internal use only.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadState.SuspendRequested">
            <summary>
            The thread is being requested to suspend.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadState.Background">
            <summary>
            The thread is being executed as a background thread, as opposed to a foreground thread. This state is controlled by setting the Thread.IsBackground property.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadState.Unstarted">
            <summary>
            The Thread.Start method has not been invoked on the thread.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadState.Stopped">
            <summary>
            The thread has stopped.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadState.WaitSleepJoin">
            <summary>
            The thread is blocked. This could be the result of calling Thread.Sleep or Thread.Join, of requesting a lock � for example, by calling Monitor.Enter 
            or Monitor.Wait � or of waiting on a thread synchronization object such as ManualResetEvent.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadState.Suspended">
            <summary>
            The thread has been suspended.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadState.AbortRequested">
            <summary>
            The Thread.Abort method has been invoked on the thread, but the thread has not yet received the pending System.Threading.ThreadAbortException that will attempt to terminate it.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadState.Aborted">
            <summary>
            The thread state includes AbortRequested and the thread is now dead, but its state has not yet changed to Stopped.
            </summary>
        </member>
        <member name="T:System.Threading.Timeout">
            <summary>
            Contains constants that specify infinite time-out intervals. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:System.Threading.Timeout.Infinite">
            <summary>
            A constant used to specify an infinite waiting period, for threading methods that accept an Int32 parameter.
            </summary>
            <remarks>The value of this field is -1 (0xFFFFFFFF).</remarks>
        </member>
        <member name="F:System.Threading.Timeout.InfiniteTimeSpan">
            <summary>
            A constant used to specify an infinite waiting period, for methods that accept a <see cref="T:System.TimeSpan"/> parameter.
            </summary>
            <remarks>
            For threading methods that accept a timeout parameter of type <see cref="T:System.TimeSpan"/>, such as <see cref="M:System.Threading.Thread.Sleep(System.TimeSpan)"/> and <see cref="M:System.Threading.Thread.Join(System.TimeSpan)"/>, this value is used to suspend the thread indefinitely. However, in most cases, we recommend that you use other <see cref="N:System.Threading"/> classes such as <see cref="T:System.Threading.AutoResetEvent"/>, <see cref="T:System.Threading.ManualResetEvent"/>, <see cref="T:System.Threading.Monitor"/> or <see cref="T:System.Threading.WaitHandle"/> instead to synchronize threads or manage resources. 
            The value of this field is -00:00:00.0010000, or -1 millisecond.
            </remarks>
        </member>
        <member name="T:System.Threading.TimerCallback">
            <summary>
            Represents the method that handles calls from a Timer.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:System.Threading.Timer">
            <summary>
            Provides a mechanism for executing a method on a thread pool thread at specified intervals. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Timer class, using a 32-bit signed integer to specify the time interval.
            </summary>
            <param name="callback">A TimerCallback delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or null.</param>
            <param name="dueTime">The amount of time to delay before callback is invoked, in milliseconds. Specify Timeout.Infinite to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
            <param name="period">The time interval between invocations of callback, in milliseconds. Specify Timeout.Infinite to disable periodic signaling.</param>
        </member>
        <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the Timer class, using TimeSpan values to measure time intervals.
            </summary>
            <param name="callback">A delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or null.</param>
            <param name="dueTime">The amount of time to delay before the callback parameter invokes its methods. Specify negative one (-1) milliseconds to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
            <param name="period">The time interval between invocations of the methods referenced by callback. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
        </member>
        <member name="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.
            </summary>
            <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the Timer was constructed, in milliseconds. 
            Specify Timeout.Infinite to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
            <param name="period">The time interval between invocations of the callback method specified when the Timer was constructed, in milliseconds. 
            Specify Timeout.Infinite to disable periodic signaling.</param>
            <returns>true if the timer was successfully updated; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using TimeSpan values to measure time intervals.
            </summary>
            <param name="dueTime">A TimeSpan representing the amount of time to delay before invoking the callback method specified when the Timer was constructed. 
            Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
            <param name="period">The time interval between invocations of the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <returns>true if the timer was successfully updated; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Timer.Dispose">
            <summary>
            Releases all resources used by the current instance of Timer.
            </summary>
        </member>
        <member name="T:System.Threading.WaitHandle">
            <summary>
            Encapsulates operating system�specific objects that wait for exclusive access to shared resources.
            </summary>
        </member>
        <member name="F:System.Threading.WaitHandle.WaitTimeout">
            <summary>
            Indicates that a WaitAny operation timed out before any of the wait handles were signaled. This field is constant.
            </summary>
        </member>
        <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
            <summary>
            Blocks the current thread until the current WaitHandle receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false.</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.WaitHandle.WaitOne">
            <summary>
            Blocks the current thread until the current WaitHandle receives a signal.
            </summary>
            <returns>true if the current instance receives a signal. If the current instance is never signaled, WaitOne never returns.</returns>
        </member>
        <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
            <summary>
            Waits for all the elements in the specified array to receive a signal, using an Int32 value to specify the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false.</param>
            <returns>true when every element in waitHandles has received a signal; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
            <summary>
            Waits for all the elements in the specified array to receive a signal.
            </summary>
            <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object.</param>
            <returns>true when every element in waitHandles has received a signal; otherwise the method never returns.</returns>
        </member>
        <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
            <summary>
            Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false.</param>
            <returns>The array index of the object that satisfied the wait, or WaitTimeout if no object satisfied the wait and a time interval equivalent to millisecondsTimeout has passed.</returns>
        </member>
        <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
            <summary>
            Waits for any of the elements in the specified array to receive a signal.
            </summary>
            <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait.</param>
            <returns>The array index of the object that satisfied the wait.</returns>
        </member>
        <member name="T:System.TimeSpan">
            <summary>
            Represents a time interval.
            </summary>
            <remarks>
            A <see cref="T:System.TimeSpan"/> object represents a time interval (duration of time or elapsed time) that is measured as a positive or negative number of days, hours, minutes, seconds, and fractions of a second. The <see cref="T:System.TimeSpan"/> structure can also be used to represent the time of day, but only if the time is unrelated to a particular date. Otherwise, the <see cref="T:System.DateTime"/> structure should be used instead.
            The value of a <see cref="T:System.TimeSpan"/> object is the number of ticks that equal the represented time interval. A tick is equal to 100 nanoseconds, or one ten-millionth of a second. The value of a <see cref="T:System.TimeSpan"/> object can range from <see cref="F:System.TimeSpan.MinValue"/> to <see cref="F:System.TimeSpan.MaxValue"/>. 
            </remarks>
        </member>
        <member name="F:System.TimeSpan.TicksPerMillisecond">
            <summary>
            Represents the number of ticks in 1 millisecond. This field is constant.
            </summary>
        </member>
        <member name="F:System.TimeSpan.TicksPerSecond">
            <summary>
            Represents the number of ticks in 1 second.
            </summary>
        </member>
        <member name="F:System.TimeSpan.TicksPerMinute">
            <summary>
            Represents the number of ticks in 1 minute. This field is constant.
            </summary>
        </member>
        <member name="F:System.TimeSpan.TicksPerHour">
            <summary>
            Represents the number of ticks in 1 hour. This field is constant.
            </summary>
        </member>
        <member name="F:System.TimeSpan.TicksPerDay">
            <summary>
            Represents the number of ticks in 1 day. This field is constant.
            </summary>
        </member>
        <member name="F:System.TimeSpan.Zero">
            <summary>
            Represents the zero <see cref="T:System.TimeSpan"/> value. This field is read-only.
            </summary>
        </member>
        <member name="F:System.TimeSpan.MaxValue">
            <summary>
            Represents the maximum <see cref="T:System.TimeSpan"/> value. This field is read-only.
            </summary>
        </member>
        <member name="F:System.TimeSpan.MinValue">
            <summary>
            Represents the minimum <see cref="T:System.TimeSpan"/> value. This field is read-only.
            </summary>
        </member>
        <member name="M:System.TimeSpan.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.TimeSpan"/> structure to the specified number of ticks.
            </summary>
            <param name="ticks">A time period expressed in 100-nanosecond units.</param>
        </member>
        <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.TimeSpan"/> structure to a specified number of hours, minutes, and seconds.
            </summary>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
        </member>
        <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.TimeSpan"/> structure to a specified number of days, hours, minutes, and seconds.
            </summary>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
        </member>
        <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.TimeSpan"/> structure to a specified number of days, hours, minutes, seconds and milliseconds.
            </summary>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="milliseconds">Number of milliseconds.</param>
        </member>
        <member name="P:System.TimeSpan.Ticks">
            <summary>
            Gets the number of ticks that represent the value of the current <see cref="T:System.TimeSpan"/> structure.
            </summary>
            <value>The number of ticks contained in this instance. </value>
        </member>
        <member name="P:System.TimeSpan.Days">
            <summary>
            Gets the days component of the time interval represented by the current <see cref="T:System.TimeSpan"/> structure.
            </summary>
            <value>The day component of this instance. The return value can be positive or negative.</value>
        </member>
        <member name="P:System.TimeSpan.Hours">
            <summary>
            Gets the hours component of the time interval represented by the current <see cref="T:System.TimeSpan"/> structure.
            </summary>
            <value>The hour component of this instance. The return value ranges from -23 through 23.</value>
        </member>
        <member name="P:System.TimeSpan.Milliseconds">
            <summary>
            Gets the milliseconds component of the time interval represented by the current <see cref="T:System.TimeSpan"/> structure.
            </summary>
            <value>The millisecond component of this instance.  The return value ranges from -999 through 999.</value>
        </member>
        <member name="P:System.TimeSpan.Minutes">
            <summary>
            Gets the minutes component of the time interval represented by the current <see cref="T:System.TimeSpan"/> structure.
            </summary>
            <value>The minute component of this instance. The return value ranges from -59 through 59.</value>
        </member>
        <member name="P:System.TimeSpan.Seconds">
            <summary>
            Gets the seconds component of the time interval represented by the current <see cref="T:System.TimeSpan"/> structure.
            </summary>
            <value>The second component of this instance. The return value ranges from -59 through 59.</value>
        </member>
        <member name="P:System.TimeSpan.TotalDays">
            <summary>
            Gets the value of the current <see cref="T:System.TimeSpan"/> structure expressed in whole and fractional days.
            </summary>
            <value>The total number of days represented by this instance.</value>
        </member>
        <member name="P:System.TimeSpan.TotalHours">
            <summary>
            Gets the value of the current <see cref="T:System.TimeSpan"/> structure expressed in whole and fractional hours.
            </summary>
            <value>The total number of hours represented by this instance.</value>
        </member>
        <member name="P:System.TimeSpan.TotalMilliseconds">
            <summary>
            Gets the value of the current <see cref="T:System.TimeSpan"/> structure expressed in whole and fractional milliseconds.
            </summary>
            <value>The total number of milliseconds represented by this instance.</value>
        </member>
        <member name="P:System.TimeSpan.TotalMinutes">
            <summary>
            Gets the value of the current <see cref="T:System.TimeSpan"/> structure expressed in whole and fractional minutes.
            </summary>
            <value>The total number of minutes represented by this instance.</value>
        </member>
        <member name="P:System.TimeSpan.TotalSeconds">
            <summary>
            Gets the value of the current <see cref="T:System.TimeSpan"/> structure expressed in whole and fractional seconds.
            </summary>
            <value>The total number of seconds represented by this instance.</value>
        </member>
        <member name="M:System.TimeSpan.Add(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:System.TimeSpan"/> object whose value is the sum of the specified <see cref="T:System.TimeSpan"/> object and this instance.
            </summary>
            <param name="ts">The time interval to add.</param>
            <returns>A new object that represents the value of this instance plus the value of ts.</returns>
        </member>
        <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
            <summary>
            Compares two <see cref="T:System.TimeSpan"/> values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.
            </summary>
            <param name="t1">The first time interval to compare.</param>
            <param name="t2">The second time interval to compare.</param>
            <returns>One of the following values :
            <para>-1 if t1 is shorter than t2.</para>
            <para>0 if t1 is equal to t2.</para>
            <para>1 if t1 is longer than t2.</para>
            </returns>
        </member>
        <member name="M:System.TimeSpan.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the specified object.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>One of the following values :
            <para>-1 if This instance is shorter than value.</para>
            <para>0 if This instance is equal to value.</para>
            <para>1 if This instance is longer than value or value is null.</para>
            </returns>
        </member>
        <member name="M:System.TimeSpan.Duration">
            <summary>
            Returns a new <see cref="T:System.TimeSpan"/> object whose value is the absolute value of the current <see cref="T:System.TimeSpan"/> object.
            </summary>
            <returns>A new object whose value is the absolute value of the current <see cref="T:System.TimeSpan"/> object.</returns>
        </member>
        <member name="M:System.TimeSpan.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An object to compare with this instance.</param>
            <returns>true if value is a <see cref="T:System.TimeSpan"/> object that represents the same time interval as the current <see cref="T:System.TimeSpan"/> structure; otherwise, false.</returns>
        </member>
        <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns a value that indicates whether two specified instances of <see cref="T:System.TimeSpan"/> are equal.
            </summary>
            <param name="t1">The first time interval to compare.</param>
            <param name="t2">The second time interval to compare.</param>
            <returns>true if the values of t1 and t2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:System.TimeSpan.Negate">
            <summary>
            Returns a new <see cref="T:System.TimeSpan"/> object whose value is the negated value of this instance.
            </summary>
            <returns>A new object with the same numeric value as this instance, but with the opposite sign.</returns>
        </member>
        <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:System.TimeSpan"/> object whose value is the difference between the specified <see cref="T:System.TimeSpan"/> object and this instance.
            </summary>
            <param name="ts">The time interval to be subtracted.</param>
            <returns>A new time interval whose value is the result of the value of this instance minus the value of ts.</returns>
        </member>
        <member name="M:System.TimeSpan.FromTicks(System.Int64)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified time, where the specification is in units of ticks.
            </summary>
            <param name="value">A number of ticks that represent a time.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:System.TimeSpan.FromMilliseconds(System.Int64)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified time, where the specification is in units of milliseconds.
            </summary>
            <param name="value">A number of milliseconds that represent a time.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:System.TimeSpan.FromSeconds(System.Int64)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified time, where the specification is in units of seconds.
            </summary>
            <param name="value">A number of seconds that represent a time.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:System.TimeSpan.FromMinutes(System.Int64)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified time, where the specification is in units of minute.
            </summary>
            <param name="value">A number of minute that represent a time.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:System.TimeSpan.FromHours(System.Int64)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified time, where the specification is in units of hours.
            </summary>
            <param name="value">A number of hours that represent a time.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:System.TimeSpan.FromDays(System.Int64)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified time, where the specification is in units of days.
            </summary>
            <param name="value">A number of days that represent a time.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:System.TimeSpan.ToString">
            <summary>
            Converts the value of the current <see cref="T:System.TimeSpan"/> object to its equivalent string representation.
            </summary>
            <returns>The string representation of the current <see cref="T:System.TimeSpan"/> value.</returns>
            <remarks>The returned string is formatted with the "c" format specifier and has the following format: [-][d.]hh:mm:ss[.fffffff]</remarks>
        </member>
        <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> whose value is the negated value of the specified instance.
            </summary>
            <param name="t">The time interval to be negated.</param>
            <returns>An object that has the same numeric value as this instance, but the opposite sign.</returns>
        </member>
        <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
            <summary>
            Subtracts a specified <see cref="T:System.TimeSpan"/> from another specified TimeSpan.
            </summary>
            <param name="t1">The minuend.</param>
            <param name="t2">The subtrahend.</param>
            <returns>An object whose value is the result of the value of t1 minus the value of t2.</returns>
        </member>
        <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
            <summary>
            Returns the specified instance of TimeSpan.
            </summary>
            <param name="t">The time interval to return.</param>
            <returns>The time interval specified by t.</returns>
        </member>
        <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
            <summary>
            Adds two specified <see cref="T:System.TimeSpan"/> instances.
            </summary>
            <param name="t1">The first time interval to add.</param>
            <param name="t2">The second time interval to add.</param>
            <returns>An object whose value is the sum of the values of t1 and t2.</returns>
        </member>
        <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
            <summary>
            Indicates whether two <see cref="T:System.TimeSpan"/> instances are equal
            </summary>
            <param name="t1">The first time interval to compare.</param>
            <param name="t2">The second time interval to compare.</param>
            <returns>true if the values of t1 and t2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
            <summary>
            Indicates whether two <see cref="T:System.TimeSpan"/> instances are not equal.
            </summary>
            <param name="t1">The first time interval to compare.</param>
            <param name="t2">The second time interval to compare.</param>
            <returns>true if the values of t1 and t2 are not equal; otherwise, false.</returns>
        </member>
        <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:System.TimeSpan"/> is less than another specified TimeSpan.
            </summary>
            <param name="t1">The first time interval to compare.</param>
            <param name="t2">The second time interval to compare.</param>
            <returns>true if the value of t1 is less than the value of t2; otherwise, false.</returns>
        </member>
        <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:System.TimeSpan"/> is less than or equal to another specified TimeSpan.
            </summary>
            <param name="t1">The first time interval to compare.</param>
            <param name="t2">The second time interval to compare.</param>
            <returns>true if the value of t1 is less than or equal to the value of t2; otherwise, false.</returns>
        </member>
        <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:System.TimeSpan"/> is greater than another specified TimeSpan.
            </summary>
            <param name="t1">The first time interval to compare.</param>
            <param name="t2">The second time interval to compare.</param>
            <returns>true if the value of t1 is greater than the value of t2; otherwise, false.</returns>
        </member>
        <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:System.TimeSpan"/> is greater than or equal to another specified TimeSpan.
            </summary>
            <param name="t1">The first time interval to compare.</param>
            <param name="t2">The second time interval to compare.</param>
            <returns>true if the value of t1 is greater than or equal to the value of t2; otherwise, false.</returns>
        </member>
        <member name="M:System.TimeSpan.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:System.Type">
            <summary>
            Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.
            </summary>
            <remarks>Available only in mscorlib build with support for System.Reflection.</remarks>
        </member>
        <member name="P:System.Type.DeclaringType">
            <summary>
            Gets the type that declares the current nested type or generic type parameter.
            </summary>
            <value>
            A Type object representing the enclosing type, if the current type is a nested type; or the generic type definition, 
            if the current type is a type parameter of a generic type; or the type that declares the generic method, 
            if the current type is a type parameter of a generic method; otherwise, null.
            </value>
        </member>
        <member name="M:System.Type.GetType(System.String)">
            <summary>
            Gets the Type with the specified name, performing a case-sensitive search.
            </summary>
            <param name="typeName">The assembly-qualified name of the type to get. See AssemblyQualifiedName. 
            If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
            <returns>The type with the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
            <summary>
            Invokes the specified member, using the specified binding constraints and matching the specified argument list.
            </summary>
            <param name="name">The string containing the name of the constructor, method, property, or field member to invoke.
            <para>-or-</para>
            <para>An empty string ("") to invoke the default member.</para>
            <para>-or-</para>
            <para>For IDispatch members, a string representing the DispID, for example "[DispID=3]".</para>
            </param>
            <param name="invokeAttr">A bitmask comprised of one or more BindingFlags that specify how the search is conducted. 
            The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. 
            The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used.</param>
            <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.
            <para>-or-</para>
            <para>A null reference(Nothing in Visual Basic), to use the DefaultBinder.Note that explicitly defining a Binder object may be required for successfully invoking method overloads with variable arguments.</para>
            </param>
            <param name="target">The object on which to invoke the specified member.</param>
            <param name="args">An array containing the arguments to pass to the member to invoke.</param>
            <returns>An object representing the return value of the invoked member.</returns>
        </member>
        <member name="P:System.Type.Assembly">
            <summary>
            Gets the Assembly in which the type is declared. For generic types, gets the Assembly in which the generic type is defined.
            </summary>
            <value>
            An Assembly instance that describes the assembly containing the current type. For generic types, the instance describes the assembly that 
            contains the generic type definition, not the assembly that creates and uses a particular constructed type.
            </value>
        </member>
        <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
            <summary>
            Gets the type referenced by the specified type handle.
            </summary>
            <param name="handle">The object that refers to the type.</param>
            <returns>The type referenced by the specified RuntimeTypeHandle, or null if the Value property of handle is null.</returns>
        </member>
        <member name="P:System.Type.FullName">
            <summary>
            Gets the fully qualified name of the type, including its namespace but not its assembly.
            </summary>
            <value>
            The fully qualified name of the type, including its namespace but not its assembly; or null if the current instance represents
            a generic type parameter, an array type, pointer type, or byref type based on a type parameter, or a generic type that is not 
            a generic type definition but contains unresolved type parameters.
            </value>
        </member>
        <member name="P:System.Type.AssemblyQualifiedName">
            <summary>
            Gets the assembly-qualified name of the type, which includes the name of the assembly from which this Type object was loaded.
            </summary>
            <value>
            The assembly-qualified name of the Type, which includes the name of the assembly from which the Type was loaded, or null if the current instance represents a generic type parameter.
            </value>
        </member>
        <member name="P:System.Type.BaseType">
            <summary>
            Gets the type from which the current Type directly inherits.
            </summary>
            <value>
            The Type from which the current Type directly inherits, or null if the current Type represents the Object class or an interface.
            </value>
        </member>
        <member name="M:System.Type.GetConstructor(System.Type[])">
            <summary>
            Searches for a public instance constructor whose parameters match the types in the specified array.
            </summary>
            <param name="types">An array of Type objects representing the number, order, and type of the parameters for the desired constructor.
            <para>-or-</para>
            <para>An empty array of Type objects, to get a constructor that takes no parameters.Such an empty array is provided by the static field Type.EmptyTypes.</para>
            </param>
            <returns>An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, null.</returns>
        </member>
        <member name="M:System.Type.GetMethod(System.String,System.Type[])">
            <summary>
            Searches for the specified public method whose parameters match the specified argument types.
            </summary>
            <param name="name">The string containing the name of the public method to get.</param>
            <param name="types">An array of Type objects representing the number, order, and type of the parameters for the desired constructor.
            <para>-or-</para>
            <para>An empty array of Type objects, to get a constructor that takes no parameters.Such an empty array is provided by the static field Type.EmptyTypes.</para>
            </param>
            <returns>An object representing the public method whose parameters match the specified argument types, if found; otherwise, null.</returns>
        </member>
        <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the specified method, using the specified binding constraints.
            </summary>
            <param name="name">The string containing the name of the method to get.</param>
            <param name="bindingAttr">A bitmask comprised of one or more BindingFlags that specify how the search is conducted or Zero, to return null.</param>
            <returns>An object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:System.Type.GetMethod(System.String)">
            <summary>
            Searches for the public method with the specified name.
            </summary>
            <param name="name">The string containing the name of the public method to get.</param>
            <returns>An object that represents the public method with the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:System.Type.GetMethods">
            <summary>
            Returns all the public methods of the current Type.
            </summary>
            <returns>An array of MethodInfo objects representing all the public methods defined for the current Type.
            <para>-or-</para>
            <para>An empty array of type MethodInfo, if no public methods are defined for the current Type.</para>
            </returns>
        </member>
        <member name="M:System.Type.GetMethods(System.Reflection.BindingFlags)">
            <summary>
            When overridden in a derived class, searches for the methods defined for the current Type, using the specified binding constraints.
            </summary>
            <param name="bindingAttr">A bitmask comprised of one or more BindingFlags that specify how the search is conducted or Zero, to return null.</param>
            <returns>An array of MethodInfo objects representing all the public methods defined for the current Type.
            <para>-or-</para>
            <para>An empty array of type MethodInfo, if no public methods are defined for the current Type.</para>
            </returns>
        </member>
        <member name="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the specified field, using the specified binding constraints.
            </summary>
            <param name="name">The string containing the name of the data field to get.</param>
            <param name="bindingAttr">A bitmask comprised of one or more BindingFlags that specify how the search is conducted or Zero, to return null.</param>
            <returns>An object representing the field that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:System.Type.GetField(System.String)">
            <summary>
            Searches for the public field with the specified name.
            </summary>
            <param name="name">The string containing the name of the data field to get.</param>
            <returns>An object representing the public field with the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:System.Type.GetFields">
            <summary>
            Returns all the public fields of the current Type.
            </summary>
            <returns>An array of FieldInfo objects representing all the public fields defined for the current Type.
            <para>-or-</para>
            <para>An empty array of type FieldInfo, if no public fields are defined for the current Type.</para>
            </returns>
        </member>
        <member name="M:System.Type.GetFields(System.Reflection.BindingFlags)">
            <summary>
            When overridden in a derived class, searches for the fields defined for the current Type, using the specified binding constraints.
            </summary>
            <param name="bindingAttr">A bitmask comprised of one or more BindingFlags that specify how the search is conducted or Zero, to return null.</param>
            <returns>An array of FieldInfo objects representing all the public fields defined for the current Type.
            <para>-or-</para>
            <para>An empty array of type FieldInfo, if no public fields are defined for the current Type.</para>
            </returns>
        </member>
        <member name="M:System.Type.GetInterfaces">
            <summary>
            When overridden in a derived class, gets all the interfaces implemented or inherited by the current Type.
            </summary>
            <returns>An array of Type objects representing all the interfaces implemented or inherited by the current Type.
            <para>-or-</para>
            <para>An empty array of type Type, if no interfaces are implemented or inherited by the current Type.</para>
            </returns>
        </member>
        <member name="P:System.Type.IsNotPublic">
            <summary>
            Gets a value indicating whether the Type is not declared public.
            </summary>
            <value>true if the Type is not declared public and is not a nested type; otherwise, false.</value>
        </member>
        <member name="P:System.Type.IsPublic">
            <summary>
            Gets a value indicating whether the Type is declared public.
            </summary>
            <value>true if the Type is declared public and is not a nested type; otherwise, false.</value>
        </member>
        <member name="P:System.Type.IsClass">
            <summary>
            Gets a value indicating whether the Type is a class or a delegate; that is, not a value type or interface.        
            </summary>
            <value>true if the Type is a class; otherwise, false.</value>
        </member>
        <member name="P:System.Type.IsInterface">
            <summary>
            Gets a value indicating whether the Type is an interface; that is, not a class or a value type.        
            </summary>
            <value>true if the Type is an interface; otherwise, false.</value>
        </member>
        <member name="P:System.Type.IsValueType">
            <summary>
            Gets a value indicating whether the Type is a value type.        
            </summary>
            <value>true if the Type is a value type; otherwise, false.</value>
        </member>
        <member name="P:System.Type.IsAbstract">
            <summary>
            Gets a value indicating whether the Type is abstract and must be overridden.       
            </summary>
            <value>true if the Type is abstract; otherwise, false.</value>
        </member>
        <member name="P:System.Type.IsEnum">
            <summary>
            Gets a value indicating whether the current Type represents an enumeration.      
            </summary>
            <value>true if the current Type represents an enumeration; otherwise, false.</value>
        </member>
        <member name="P:System.Type.IsSerializable">
            <summary>
            Gets a value indicating whether the Type is serializable.      
            </summary>
            <value>true if the Type is serializable; otherwise, false.</value>
        </member>
        <member name="P:System.Type.IsArray">
            <summary>
            Gets a value that indicates whether the type is an array.  
            </summary>
            <value>true if the current type is an array; otherwise, false.</value>
        </member>
        <member name="M:System.Type.GetElementType">
            <summary>
            When overridden in a derived class, returns the Type of the object encompassed or referred to by the current array, pointer or reference type.
            </summary>
            <returns>The Type of the object encompassed or referred to by the current array, pointer, or reference type, or null if the current Type is 
            not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.
            </returns>
        </member>
        <member name="M:System.Type.IsSubclassOf(System.Type)">
            <summary>
            Determines whether the current Type derives from the specified Type.
            </summary>
            <param name="c">The type to compare with the current type.</param>
            <returns>true if the current Type derives from c; otherwise, false. This method also returns false if c and the current Type are equal.</returns>
        </member>
        <member name="M:System.Type.IsInstanceOfType(System.Object)">
            <summary>
            Determines whether the specified object is an instance of the current Type.
            </summary>
            <param name="o">The object to compare with the current type.</param>
            <returns>true if the current Type is in the inheritance hierarchy of the object represented by o, or if the current Type is an interface that o implements. 
            false if neither of these conditions is the case, if o is null, or if the current Type is an open generic type (that is, ContainsGenericParameters returns true).
            </returns>
        </member>
        <member name="M:System.Type.ToString">
            <summary>
            Returns a String representing the name of the current Type.
            </summary>
            <returns>A String representing the name of the current Type.</returns>
        </member>
        <member name="T:System.TypeCode">
            <summary>
            Specifies the type of an object.
            </summary>
        </member>
        <member name="F:System.TypeCode.Empty">
            <summary>
            A null reference.
            </summary>
        </member>
        <member name="F:System.TypeCode.Object">
            <summary>
            A general type representing any reference or value type not explicitly represented by another TypeCode.
            </summary>
        </member>
        <member name="F:System.TypeCode.DBNull">
            <summary>
            A database null (column) value.
            </summary>
        </member>
        <member name="F:System.TypeCode.Boolean">
            <summary>
            A simple type representing Boolean values of true or false.
            </summary>
        </member>
        <member name="F:System.TypeCode.Char">
            <summary>
            An integral type representing unsigned 16-bit integers with values between 0 and 65535. The set of possible values for the Char type corresponds to the Unicode character set.
            </summary>
        </member>
        <member name="F:System.TypeCode.SByte">
            <summary>
            An integral type representing signed 8-bit integers with values between -128 and 127.
            </summary>
        </member>
        <member name="F:System.TypeCode.Byte">
            <summary>
            An integral type representing unsigned 8-bit integers with values between 0 and 255.
            </summary>
        </member>
        <member name="F:System.TypeCode.Int16">
            <summary>
            An integral type representing signed 16-bit integers with values between -32768 and 32767.
            </summary>
        </member>
        <member name="F:System.TypeCode.UInt16">
            <summary>
            An integral type representing unsigned 16-bit integers with values between 0 and 65535.
            </summary>
        </member>
        <member name="F:System.TypeCode.Int32">
            <summary>
            An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647.
            </summary>
        </member>
        <member name="F:System.TypeCode.UInt32">
            <summary>
            An integral type representing unsigned 32-bit integers with values between 0 and 4294967295.
            </summary>
        </member>
        <member name="F:System.TypeCode.Int64">
            <summary>
            An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807.
            </summary>
        </member>
        <member name="F:System.TypeCode.UInt64">
            <summary>
            An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615.
            </summary>
        </member>
        <member name="F:System.TypeCode.Single">
            <summary>
            A floating point type representing values ranging from approximately 1.5 x 10 -45 to 3.4 x 10 38 with a precision of 7 digits.
            </summary>
        </member>
        <member name="F:System.TypeCode.Double">
            <summary>
            A floating point type representing values ranging from approximately 5.0 x 10 -324 to 1.7 x 10 308 with a precision of 15-16 digits.
            </summary>
        </member>
        <member name="F:System.TypeCode.Decimal">
            <summary>
            A simple type representing values ranging from 1.0 x 10 -28 to approximately 7.9 x 10 28 with 28-29 significant digits.
            </summary>
        </member>
        <member name="F:System.TypeCode.DateTime">
            <summary>
            A type representing a date and time value.
            </summary>
        </member>
        <member name="F:System.TypeCode.String">
            <summary>
            A sealed class type representing Unicode character strings.
            </summary>
        </member>
        <member name="T:System.TypedReference">
            <summary>
            Describes objects that contain both a managed pointer to a location and a runtime representation of the type that may be stored at that location.
            </summary>
        </member>
        <member name="T:System.UInt16">
            <summary>
            Represents a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="F:System.UInt16.MaxValue">
            <summary>
            Represents the largest possible value of UInt16. This field is constant.
            </summary>
            <remarks>The value of this constant is 65535; that is, hexadecimal 0xFFFF.</remarks>
        </member>
        <member name="F:System.UInt16.MinValue">
            <summary>
            Represents the smallest possible value of UInt16. This field is constant.
            </summary>
            <remarks>The value of this constant is 0.</remarks>
        </member>
        <member name="M:System.UInt16.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance, which consists of a sequence of digits ranging from 0 to 9, without a sign or leading zeros.</returns>
        </member>
        <member name="M:System.UInt16.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the specified format.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>The string representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:System.UInt16.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its 16-bit unsigned integer equivalent.
            </summary>
            <param name="s">A string that represents the number to convert.</param>
            <returns>A 16-bit unsigned integer equivalent to the number contained in s.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:System.UInt32">
            <summary>
            Represents a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:System.UInt32.MaxValue">
            <summary>
            Represents the largest possible value of UInt32. This field is constant.
            </summary>
            <remarks>The value of this constant is 4,294,967,295; that is, hexadecimal 0xFFFFFFFF.</remarks>
        </member>
        <member name="F:System.UInt32.MinValue">
            <summary>
            Represents the smallest possible value of UInt32. This field is constant.
            </summary>
            <remarks>The value of this constant is 0.</remarks>
        </member>
        <member name="M:System.UInt32.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</returns>
        </member>
        <member name="M:System.UInt32.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the specified format.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>The string representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:System.UInt32.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its 32-bit unsigned integer equivalent.
            </summary>
            <param name="s">A string representing the number to convert.</param>
            <returns>A 32-bit unsigned integer equivalent to the number contained in s.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:System.UInt64">
            <summary>
            Represents a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="F:System.UInt64.MaxValue">
            <summary>
            Represents the largest possible value of UInt64. This field is constant.
            </summary>
            <remarks>The value of this constant is 18,446,744,073,709,551,615; that is, hexadecimal 0xFFFFFFFFFFFFFFFF.</remarks>
        </member>
        <member name="F:System.UInt64.MinValue">
            <summary>
            Represents the smallest possible value of UInt64. This field is constant.
            </summary>
            <remarks>The value of this constant is 0.</remarks>
        </member>
        <member name="M:System.UInt64.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</returns>
        </member>
        <member name="M:System.UInt64.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the specified format.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>The string representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:System.UInt64.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its 64-bit unsigned integer equivalent.
            </summary>
            <param name="s">A string that represents the number to convert.</param>
            <returns>A 64-bit unsigned integer equivalent to the number contained in s.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:System.UIntPtr">
            <summary>
            A platform-specific type that is used to represent a pointer or a handle.
            </summary>
        </member>
        <member name="T:System.ValueType">
            <summary>
            Provides the base class for value types.
            </summary>
        </member>
        <member name="M:System.ValueType.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>true if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="T:System.Version">
            <summary>
            Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Version class with the specified major, minor, build, and revision numbers.
            </summary>
            <param name="major">The major version number.</param>
            <param name="minor">The minor version number.</param>
            <param name="build">The build number.</param>
            <param name="revision">The revision number.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Version class using the specified major and minor values.
            </summary>
            <param name="major">The major version number.</param>
            <param name="minor">The minor version number.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:System.Version.Major">
            <summary>
            Gets the value of the major component of the version number for the current Version object.
            </summary>
            <value>The major version number.</value>
        </member>
        <member name="P:System.Version.Minor">
            <summary>
            Gets the value of the minor component of the version number for the current Version object.
            </summary>
            <value>The minor version number.</value>
        </member>
        <member name="P:System.Version.Revision">
            <summary>
            Gets the value of the revision component of the version number for the current Version object.
            </summary>
            <value>The revision version number.</value>
        </member>
        <member name="P:System.Version.Build">
            <summary>
            Gets the value of the build component of the version number for the current Version object.
            </summary>
            <value>The build version number.</value>
        </member>
        <member name="M:System.Version.Equals(System.Object)">
            <summary>
            Returns a value indicating whether the current Version object is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with the current Version object, or null.</param>
            <returns>true if the current Version object and obj are both Version objects, and every component of the current Version object matches the corresponding component of obj; otherwise, false.</returns>
        </member>
        <member name="M:System.Version.ToString">
            <summary>
            Converts the value of the current Version object to its equivalent String representation.
            </summary>
            <returns>The String representation of the values of the major, minor, build, and revision components of the current Version object, as depicted in the following format.
            Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined:
            major.minor[.build[.revision]]</returns>
        </member>
        <member name="M:System.Version.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:System.Void">
            <summary>
            Specifies a return value type for a method that does not return a value.
            </summary>
        </member>
        <member name="T:System.WeakReference">
            <summary>
            Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:System.WeakReference.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the WeakReference class, referencing the specified object.
            </summary>
            <param name="target">The object to track or null.</param>
        </member>
        <member name="P:System.WeakReference.IsAlive">
            <summary>
            Gets an indication whether the object referenced by the current WeakReference object has been garbage collected.
            </summary>
            <value>true if the object referenced by the current WeakReference object has not been garbage collected and is still accessible; otherwise, false.</value>
        </member>
        <member name="P:System.WeakReference.Target">
            <summary>
            Gets or sets the object (the target) referenced by the current WeakReference object.
            </summary>
            <value>null if the object referenced by the current WeakReference object has been garbage collected; otherwise, a reference to the object referenced by the current WeakReference object.</value>
        </member>
    </members>
</doc>
